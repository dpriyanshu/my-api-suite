{
  "info": {
    "_postman_id": "e535f133-9b44-461e-829d-0f22448a350c",
    "name": "r4e-tenant-actions",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "tests",
      "item": [
        {
          "name": "r2ts",
          "item": [
            {
              "name": "ManualTicketCreation",
              "item": [
                {
                  "name": "Setup",
                  "item": [
                    {
                      "name": "searchRoles",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "dac590b2-fcbc-4c35-bcff-075eb80e1a65",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "ab0747cd-5e8c-4c16-b6b9-0c1f8a91b6c0",
                            "exec": [
                              "pm.test(\"Verify Success code\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.response.responseCode).to.eql(\"Success\");",
                              "});",
                              "",
                              "pm.test(\"Capture roleIDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(jsonData);",
                              "    var rolesLength = jsonData.roles.length;",
                              "    pm.expect(rolesLength).to.above(0);",
                              "    for(let i = 0; i < rolesLength; i++) {",
                              "        if(jsonData.roles[i].name.toLowerCase() == 'admin') {",
                              "            pm.globals.set('rID', jsonData.roles[i].id);",
                              "            break;",
                              "        }",
                              "    }",
                              "    console.log('Captured Role ID = '+pm.globals.get('rID')); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "a9b9584a-175e-4b54-af7a-83716a312573",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"searchRequest\": {\n        \"filters\": []\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-admin}}/{{searchRoles}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveQueue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "b6a7c409-1a56-470f-acb5-d06a556570c7",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture queueID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('qID', jsonData.queue.id);",
                              "    console.log('Captured Queue ID = '+pm.globals.get('qID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "d9eeef88-4c03-46aa-ab20-bd251aa69887",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"queue\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Test Queue\",\n        \"roleIDs\": [\n            \"{{rID}}\"\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveQueue}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveStage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "a481cff4-d38b-437b-abc5-a39e5268d7e5",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture stageID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('sID', jsonData.stage.id);",
                              "    console.log('Captured Stage ID = '+pm.globals.get('sID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "14984d44-ca5b-49f8-9eb1-89d99eb23f51",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"stage\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Stage One\",\n        \"system\": false,\n        \"order\": 10,\n        \"onHold\": false\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "getLocationByCode",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "624c43de-60ac-4676-b5c0-a04a27402ec5",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Location IDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('lId',jsonData.location.id);",
                              "    pm.globals.set('lUId',jsonData.location.uid);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "a1014ff9-7bb1-47b6-8a60-8e32060c5b17",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "d4dbe873-ac5d-4b45-b4dc-080de7fa7332",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"locationCode\": \"{{TenantActionsLocationOneCode}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-location-backend}}/{{getLocationByCode}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "6279d79e-7eeb-465b-81ce-03f2cf5830b6"
                },
                {
                  "name": "Tests",
                  "item": [
                    {
                      "name": "saveTicket",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "ac465946-8567-41c4-b77c-0d819fc62bc7",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket ID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('ticketID', jsonData.ticket.id)",
                              "})",
                              "",
                              "pm.test(\"Console Comment\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(jsonData.ticket.comment);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "8bcad816-7260-444f-a2c5-d3f372f108ca",
                            "exec": [
                              "var date = Date.now();",
                              "pm.globals.set('dueDate', date);",
                              "pm.globals.set('comment', \"Postman Request added at \" + date);",
                              "console.log(pm.globals.get('comment'))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "e26f81ae-64fb-4132-aa23-8a1896160a90",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"ticket\": {\n        \"locationID\": \"{{lId}}\",\n        \"dueDate\": \"{{dueDate}}\",\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"locationUid\": {{lUId}},\n        \"ticketType\": \"UserDefined\",\n        \"queueID\": \"{{qID}}\",\n        \"stageID\": \"{{sID}}\",\n        \"responded\": false,\n        \"pendingApproval\": false,\n        \"comment\": \"{{comment}}\",\n        \"reporterName\": \"Postman Automation\",\n        \"level\": \"Tenant\",\n        \"tags\": [],\n        \"userDefined\": {\n            \"sentiment\": \"Positive\"\n        }\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "getTicket",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Console Ticket\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(\"Saved Ticket response = \" + JSON.stringify(jsonData))",
                              "})"
                            ],
                            "type": "text/javascript",
                            "id": "8709394f-2b92-4c17-a95c-9ecf8b93e9db"
                          }
                        }
                      ],
                      "id": "d1313400-4a9d-4c63-a9cc-bf6382916040",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{ticketID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{getTicket}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "190697c3-2d87-4c74-b93f-8e2ce8970662"
                },
                {
                  "name": "TearDown",
                  "item": [
                    {
                      "name": "removeTicket",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript",
                            "id": "c7045fc7-cb88-4491-a52b-79eb94f73421"
                          }
                        }
                      ],
                      "id": "0a3fd58a-6776-4db4-9938-cd6beeb62816",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{ticketID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeStage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript",
                            "id": "0c98a341-2e8d-4b27-bff7-ef007c65def2"
                          }
                        }
                      ],
                      "id": "61fec0c1-c39c-4c5b-9a38-c1420b521aff",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"stageID\": \"{{sID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeQueue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript",
                            "id": "c32cf087-a4f4-4fce-afc6-3660a4668a1d"
                          }
                        }
                      ],
                      "id": "b366d80e-ce78-4c70-aa32-37543b0ecf54",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"queueID\": \"{{qID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeQueue}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "c0c058e7-06eb-4fbd-86de-db88c43578ba"
                }
              ],
              "id": "cf12ff62-a282-4565-bca5-9c09f46bff0c"
            },
            {
              "name": "Sanity",
              "item": [
                {
                  "name": "searchRoles",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "640aa135-7c1b-4561-8f5b-1422d8cff7cf",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "36c66362-db72-45ab-bb6a-4de1662d2158",
                        "exec": [
                          "pm.test(\"Verify Success code\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.response.responseCode).to.eql(\"Success\");",
                          "});",
                          "",
                          "pm.test(\"Capture roleIDs\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    console.log(jsonData);",
                          "    var rolesLength = jsonData.roles.length;",
                          "    pm.expect(rolesLength).to.above(0);",
                          "    pm.globals.set('roleID',jsonData.roles[0].id);",
                          "    console.log(\">>>>>>>>>>>roleID>>>>>>>>>>\"+pm.globals.get('roleID'));",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "ab975a36-1d7b-48ed-bc5c-913a54a1263a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"searchRequest\": {\n        \"filters\": []\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "http://{{r4e-admin}}/{{searchRoles}}"
                  },
                  "response": []
                },
                {
                  "name": "searchStages",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "6c61fed7-9b33-4210-836d-99570b7ac381",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d64a2f77-8d5b-4906-8cab-a54be48370b6",
                        "exec": [
                          "pm.test(\"Verify Status Code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "    console.log(\"Status is 200 --> \")",
                          "});",
                          "pm.test(\"Verify Response and capture stageID\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    console.log(jsonData);",
                          "    pm.expect(jsonData.response.responseCode).to.eql(\"Success\");",
                          "    var stagesLength = jsonData.stages.length;",
                          "    pm.expect(stagesLength).to.above(0);",
                          "    pm.globals.set(\"stageID\", jsonData.stages[0].id);",
                          "    console.log('>>>>>>>>>>>stageID>>>>>>>>'+pm.globals.get('stageID'));",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "757d1562-6045-4854-a0c6-87f116ad43df",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"searchRequest\": {\n        \"filters\": []\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "http://{{r4e-actions}}/{{searchStages}}"
                  },
                  "response": []
                },
                {
                  "name": "saveQueue",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "84ee679d-8741-4afe-9c80-0ed7ecccf403",
                        "exec": [
                          "pm.test(\"Verify Status Code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "    console.log(\"Status is 200 --> \")",
                          "});",
                          "",
                          "pm.test(\"Verify Response and capture queueID\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    console.log(jsonData);",
                          "    pm.expect(jsonData.response.responseCode).to.eql(\"Success\");",
                          "    pm.globals.set(\"queueID\", jsonData.queue.id);",
                          "    console.log('>>>>>>>>>>>ID>>>>>>>>'+pm.globals.get('queueID'));",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "01a20490-9fae-4164-a2b6-24d9da3bb13e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"queue\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Test Queue\",\n        \"roleIDs\": [\n            \"{{roleID}}\"\n        ]\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "http://{{r4e-actions}}/{{saveQueue}}"
                  },
                  "response": []
                },
                {
                  "name": "getQueue",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "2d4718c7-47c5-4e81-8572-df942677716a",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "62012e57-bce0-4b02-b1a5-c1e08bf3668b",
                        "exec": [
                          "pm.test(\"Verify Status Code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "    console.log(\"Status is 200 --> \")",
                          "});",
                          "",
                          "pm.test(\"Verify Response\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    console.log(jsonData);",
                          "    pm.expect(jsonData.response.responseCode).to.eql(\"Success\");",
                          "    pm.expect(jsonData.queue.id).to.eql(pm.globals.get('queueID'));",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "a3b48b84-00cd-40d9-a8b9-0612ab8cb605",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"queueID\": \"{{queueID}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "http://{{r4e-actions}}/{{getQueue}}"
                  },
                  "response": []
                },
                {
                  "name": "searchQueues",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "ce8d2ce5-b6bc-4e46-bd3b-44bc3c989bd5"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Verify Status Code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "    console.log(\"Status is 200 --> \")",
                          "});",
                          "pm.test(\"Verify Response\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    console.log(jsonData);",
                          "    pm.expect(jsonData.response.responseCode).to.eql(\"Success\");",
                          "    var queuesLength = jsonData.queues.length;",
                          "    pm.expect(queuesLength).to.above(0);",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "e4b95584-1aa4-4f30-8ebc-2fe2b38dcbda"
                      }
                    }
                  ],
                  "id": "e5e87d49-9139-4654-9af7-9206976690df",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"searchRequest\": {\n        \"filters\": []\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "http://{{r4e-actions}}/{{searchQueues}}"
                  },
                  "response": []
                },
                {
                  "name": "searchQueues by ID",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "92fb8c32-d9bc-41b0-83ad-9e6ce5614f71",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "656f9f9f-d67a-45df-b069-571d119c69fc",
                        "exec": [
                          "pm.test(\"Verify Status Code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "    console.log(\"Status is 200 --> \")",
                          "});",
                          "pm.test(\"Verify Response\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    console.log(jsonData);",
                          "    pm.expect(jsonData.response.responseCode).to.eql(\"Success\");",
                          "    var queuesLength = jsonData.queues.length;",
                          "    pm.expect(queuesLength).to.eql(1);",
                          "    pm.expect(jsonData.queues[0].id).to.eql(pm.globals.get('queueID'));",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "4deea060-646b-45a1-92a2-f19c3103fafb",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"searchRequest\": {\n        \"filters\": [\n            {\n                \"name\": \"_id\",\n                \"values\": [\"{{queueID}}\"]\n            }\n        ]\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "http://{{r4e-actions}}/{{searchQueues}}"
                  },
                  "response": []
                },
                {
                  "name": "removeQueue",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Verify Status Code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "    console.log(\"Status is 200 --> \")",
                          "});",
                          "",
                          "pm.test(\"Verify Response\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    console.log(jsonData);",
                          "    pm.expect(jsonData.response.responseCode).to.eql(\"Success\");",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "2a2064af-1f7c-4e73-ab21-d188e4b8354c"
                      }
                    }
                  ],
                  "id": "81b57e2b-5554-4cce-b5fa-8781a39047b2",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"queueID\": \"{{queueID}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "http://{{r4e-actions}}/{{removeQueue}}"
                  },
                  "response": []
                }
              ],
              "id": "f9f5a7ae-1444-4935-afc9-1fac67331b76"
            },
            {
              "name": "CreateTicketFromReviews",
              "item": [
                {
                  "name": "Setup",
                  "item": [
                    {
                      "name": "removeLambdas",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "9946160b-cd69-477d-b8c1-06d29142076c",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "77da2869-14f6-4d87-85c6-9bd190ab67a7",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"searchRequest\": {\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-lambda}}/{{removeLambdas}}"
                      },
                      "response": []
                    },
                    {
                      "name": "searchRoles",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "e1d89a4b-fe45-443b-98b3-29b4d4442b17",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "07a4bdbd-71f2-4a75-884d-9729e6989ae0",
                            "exec": [
                              "pm.test(\"Verify Success code\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.response.responseCode).to.eql(\"Success\");",
                              "});",
                              "",
                              "pm.test(\"Capture roleIDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(jsonData);",
                              "    var rolesLength = jsonData.roles.length;",
                              "    pm.expect(rolesLength).to.above(0);",
                              "    for(let i = 0; i < rolesLength; i++) {",
                              "        if(jsonData.roles[i].name.toLowerCase() == 'admin') {",
                              "            pm.globals.set('rID', jsonData.roles[i].id);",
                              "            break;",
                              "        }",
                              "    }",
                              "    console.log('Captured Role ID = '+pm.globals.get('rID')); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "f16cb0f5-38d9-4a30-aa49-76a4a08184a3",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"searchRequest\": {\n        \"filters\": []\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-admin}}/{{searchRoles}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveQueue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "19cd3247-58f9-4369-a048-05d17af74f13",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture queueID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('qID', jsonData.queue.id);",
                              "    console.log('Captured Queue ID = '+pm.globals.get('qID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "6f7e584d-21de-414d-9159-7affbd33972e",
                            "exec": [
                              "pm.globals.set('reviewsQueue', 'Reviews Queue')"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "55441d50-78b7-4e25-869c-296bb3ab32eb",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"queue\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"{{reviewsQueue}}\",\n        \"roleIDs\": [\n            \"{{rID}}\"\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveQueue}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveStage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "03428f71-4acb-4762-9513-134078cc84d8",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture stageID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('sID', jsonData.stage.id);",
                              "    console.log('Captured Stage ID = '+pm.globals.get('sID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "8f741595-6ec6-45d6-b1cc-456fe8d33f3e",
                            "exec": [
                              "pm.globals.set('reviewsStage', 'Reviews Stage')"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "67b7935e-da49-4d5f-9d6b-85fd900d4bfb",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"stage\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"{{reviewsStage}}\",\n        \"system\": false,\n        \"order\": 11,\n        \"onHold\": false\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveTag",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "53dc6177-794d-4245-b772-b3edbb920dd6",
                            "exec": [
                              "pm.globals.set('reviewsTag', 'Reviews Tag')"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "bb462a59-e37a-428b-8e3d-a101a18b942b",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture stageID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('tID', jsonData.tag.id);",
                              "    console.log('Captured Tag ID = '+pm.globals.get('tID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "b8c34cb4-cb30-4355-adaa-7c1ee1b8f6c5",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"stage\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"{{reviewsTag}}\",\n        \"system\": false\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveTag}}"
                      },
                      "response": []
                    },
                    {
                      "name": "getLocationByCode",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "4ab6e823-bfa2-4f32-ae26-8b91905fabd2",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Location IDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('lId',jsonData.location.id);",
                              "    pm.globals.set('lUId',jsonData.location.uid);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "3bf9d3cd-bb4b-4afa-a04c-3bf144f61fc7",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "64e619cd-b264-4c28-9fa2-a4fb4da0c9bb",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"locationCode\": \"{{TenantActionsReviewsOneCode}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-location-backend}}/{{getLocationByCode}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveLocationPages",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "34304956-f5c8-44d3-bf2f-433e8ea4de0d",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "dfda2b05-bd74-414c-ae73-0339416acc50",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n      \"tenantID\": {{ActionsTenantID}}\n    },\n    \"saveLocationPagesRequest\": {\n      \"locationPages\": {\n        \"code\": \"{{TenantActionsReviewsOneCode}}\",\n        \"locationUid\": {{lUId}},\n        \"locationID\": \"{{lId}}\",\n        \"pages\": [\n          {\n            \"sourceID\": \"{{GoogleSourceID}}\",\n            \"sourceUid\": {{GoogleSourceUiD}},\n            \"url\": \"{{GOOGLE_URL1}}\"\n          }\n        ]\n      },\n      \"fields\": []\n    }\n  }",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-location-backend}}/{{saveLocationPages}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveGoogleCredential",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "c261d8a9-82d2-4a04-9299-82c06a6f156d",
                            "exec": [
                              "pm.globals.set('username', 'test')",
                              "pm.globals.set('password', 'test')"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "7284577f-d0fb-4e7c-9c9e-c53a7d99b526",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test('Capture Credential ID', function() {",
                              "    var jsonData = pm.response.json();",
                              "    let credID = jsonData.credential.id;",
                              "    pm.globals.set('credID', credID);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "e567ef81-4fea-463c-96b3-1da24b9c3b54",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"Credential\": {\n        \"credentialType\": 0,\n        \"tenantID\": {{ActionsTenantID}},\n        \"sourceID\": \"{{GoogleSourceID}}\",\n        \"sourceUid\": {{GoogleSourceUiD}},\n        \"credentialData\": {\n            \"password\": {\n                \"username\": \"{{username}}\",\n                \"password\": \"{{password}}\"\n            }\n        },\n        \"valid\": true,\n        \"page\": {\n            \"locationID\": \"{{lId}}\",\n            \"locationUid\": \"{{lUId}}\"\n        }\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-credential}}/{{saveCredential}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveGoogleReviewLambda",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "6e736763-a68f-43b9-a101-3bb30cf2538e",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Lambda ID\", function() {",
                              "    var json = pm.response.json()",
                              "    var lambdaID = json.lambdat.id;",
                              "    pm.globals.set('GooglelambdaID', lambdaID)",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "a44161e5-cf3c-4fce-9cd5-171b6261d11a",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"tlambda\": {\n        \"agencyID\": {{ActionsAgencyID}},\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Google Review Postman Automation\",\n        \"actions\": [\n            {\n                \"type\": \"ticket\",\n                \"parameters\": {\n                    \"__tags__\": \"{{tID}}\",\n                    \"__queueID__\": \"{{qID}}\",\n                    \"__sla__\": \"18\",\n                    \"__stageID__\": \"{{sID}}\"\n                }\n            }\n        ],\n        \"condition\": {\n            \"criterias\": [\n                {\n                    \"name\": \"sourceID\",\n                    \"values\": [\n                        \"{{GoogleSourceID}}\"\n                    ],\n                    \"operator\": 4,\n                    \"logical\": \"And\"\n                },\n                {\n                    \"name\": \"code\",\n                    \"values\": [\n                        \"{{TenantActionsReviewsOneCode}}\"\n                    ],\n                    \"operator\": 4,\n                    \"logical\": \"And\"\n                },\n                {\n                    \"name\": \"action\",\n                    \"values\": [\n                        \"Create\"\n                    ],\n                    \"operator\": 4,\n                    \"logical\": \"And\"\n                }\n            ]\n        },\n        \"eventType\": 0,\n        \"debug\": false\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-lambda}}/{{saveLambda}}",
                        "description": "RBENT-74136\n\n*   Added Lambda rule for Google Review to create tickets.\n*   Queue -> Reviews Queue\n*   Stage -> Reviews Stage"
                      },
                      "response": []
                    },
                    {
                      "name": "saveKioskReviewLambda",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "cadc121c-5fd1-4eef-9765-2dedf0118fbb",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Lambda ID\", function() {",
                              "    var json = pm.response.json()",
                              "    var lambdaID = json.lambdat.id;",
                              "    pm.globals.set('KiosklambdaID', lambdaID)",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "25da0a86-a47f-4586-a0b4-c3b399eecdfa",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"tlambda\": {\n        \"agencyID\": {{ActionsAgencyID}},\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"KIOSK Review Postman Automation\",\n        \"actions\": [\n            {\n                \"type\": \"ticket\",\n                \"parameters\": {\n                    \"__tags__\": \"{{tID}}\",\n                    \"__queueID__\": \"{{qID}}\",\n                    \"__sla__\": \"24\",\n                    \"__stageID__\": \"{{sID}}\"\n                }\n            }\n        ],\n        \"condition\": {\n            \"criterias\": [\n                {\n                    \"name\": \"sourceID\",\n                    \"values\": [\n                        \"{{KIOSKSourceID}}\"\n                    ],\n                    \"operator\": 4,\n                    \"logical\": \"And\"\n                },\n                {\n                    \"name\": \"action\",\n                    \"values\": [\n                        \"Create\"\n                    ],\n                    \"operator\": 4,\n                    \"logical\": \"And\"\n                }\n            ]\n        },\n        \"eventType\": 0\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-lambda}}/{{saveLambda}}",
                        "description": "RBENT-75008\n\n*   Added Lambda rule for Kiosk Review to create tickets.\n*   Queue -> Reviews Queue\n*   Stage -> Reviews Stage\n*   Tag -> Reviews Tag"
                      },
                      "response": []
                    },
                    {
                      "name": "getLocationPagesByCode",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "e47b2578-6dd6-4230-b75d-e054cccf35a6",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture KIOSK URL\", function() {",
                              "    let pages = jsonData.locationPages.pages;",
                              "    for(let i = 0; i < pages.length; i++) {",
                              "        if(pages[i].sourceID == pm.environment.get('KIOSKSourceID')){",
                              "            pm.globals.set('KioskURL', pages[i].url);",
                              "            break;",
                              "        }",
                              "    }",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "484a72b7-c7b2-4275-9c78-b7fc00a0ac48",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"locationCode\": \"{{TenantActionsReviewsOneCode}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-location-backend}}/{{getLocationPagesByCode}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "aca92383-c5e8-4b3c-b3b0-ea41bbe27624"
                },
                {
                  "name": "Tests",
                  "item": [
                    {
                      "name": "saveGoogleReview",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "151caa0e-da14-439f-b6ec-1dfa7564c6a3",
                            "exec": [
                              "var date = Date.now();",
                              "date = date/1000;",
                              "pm.globals.set('reviewDate', date);",
                              "pm.globals.set('rating', 5.0);",
                              "pm.globals.set('normalizedRating', 1);",
                              "pm.globals.set('reviewComment', 'Reviews Automation ' + date);",
                              "pm.globals.set('reviewerName', 'Postman Automation User 1');",
                              "pm.globals.set('reviewerEmail', 'postman2@automation.com');",
                              "setTimeout(function(){}, 30 * 1000);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "5b5c71bc-17a3-4fad-9de8-fcbae5df1f3d",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Review ID\", function() {",
                              "    var json = pm.response.json();",
                              "    pm.globals.set('GooglereviewID', json.id)",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "5b9d02bc-d960-4bf3-ad57-0ad611d96586",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"userID\": -1\n    },\n    \"review\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"sourceID\": \"{{GoogleSourceID}}\",\n        \"locationID\": \"{{lId}}\",\n        \"locationUid\": {{lUId}},\n        \"url\": \"{{GOOGLE_URL1}}\",\n        \"pageUrl\": \"{{GOOGLE_URL1}}\",\n        \"reviewer\": {\n            \"name\": \"{{reviewerName}}\",\n            \"email\": \"{{reviewerEmail}}\"\n        },\n        \"rating\": {{rating}},\n        \"normalizedRating\": {{normalizedRating}},\n        \"comment\": \"{{reviewComment}}\",\n        \"numReplies\": 0,\n        \"lastReplyDate\": 0,\n        \"sentiment\": 1,\n        \"shareable\": 3,\n        \"published\": false,\n        \"requested\": false,\n        \"viewed\": false,\n        \"updated\": false,\n        \"flagged\": false,\n        \"syndicated\": false,\n        \"profanity\": false,\n        \"ratedTimestamp\": {{reviewDate}},\n        \"updatedTimestamp\": {{reviewDate}},\n        \"addedTimestamp\": {{reviewDate}}\n    },\n    \"alert\": false\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-review}}/{{saveReview}}",
                        "description": "RBENT-74136\n\n*   First waits for 10 secs and then submit a Google Review"
                      },
                      "response": []
                    },
                    {
                      "name": "saveKioskReview",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "7c450b20-5d9e-461c-9b84-22408e291f82",
                            "exec": [
                              "var date = Date.now();",
                              "date = date/1000;",
                              "pm.globals.set('reviewDate', date);",
                              "pm.globals.set('rating', 5.0);",
                              "pm.globals.set('normalizedRating', 1.0);",
                              "pm.globals.set('kioskReviewComment', 'KIOSK Reviews Automation 1');",
                              "pm.globals.set('reviewerName', 'Postman Automation User 1');",
                              "pm.globals.set('reviewerEmail', 'postman@automation.com');",
                              "setTimeout(function(){}, 10 * 1000);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "6b68d4f0-1bd8-42bc-895d-2ca2bd98890b",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Review ID\", function() {",
                              "    var json = pm.response.json();",
                              "    pm.globals.set('KioskreviewID', json.id)",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "9c67c41f-d8a4-4994-b140-6abb3b10e03e",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n    },\n    \"review\": {\n        \"sourceID\": \"{{KIOSKSourceID}}\",\n        \"url\": \"{{KioskURL}}\",\n        \"reviewer\": {\n            \"name\": \"{{reviewerName}}\",\n            \"email\": \"{{reviewerEmail}}\"\n        },\n        \"rating\": {{rating}},\n        \"normalizedRating\": {{normalizedRating}},\n        \"comment\": \"{{kioskReviewComment}}\",\n        \"numReplies\": 0,\n        \"lastReplyDate\": 0,\n        \"shareable\": \"All\",\n        \"published\": false,\n        \"requested\": false,\n        \"viewed\": false,\n        \"updated\": false,\n        \"flagged\": false,\n        \"syndicated\": false,\n        \"syndicateSourceUid\": 0,\n        \"profanity\": false,\n        \"urlUid\": 0,\n        \"position\": 0,\n        \"ratedTimestamp\": {{reviewDate}},\n        \"updatedTimestamp\": {{reviewDate}},\n        \"addedTimestamp\": {{reviewDate}}\n    },\n    \"includeFlags\": false\n} ",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-review}}/{{saveReview}}",
                        "description": "RBENT-75008\n\n*   First waits for 10 secs and then submit a Google Review"
                      },
                      "response": []
                    },
                    {
                      "name": "searchTickets from Google Review",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "73555fe8-cbc9-4512-b262-5d9c8ad819a4",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket ID\", function() {",
                              "    var json = pm.response.json()",
                              "    var ticketID = json.tickets[0].id;",
                              "    pm.globals.set('GoogleticketID', ticketID)",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "f62b0518-8e19-4f0d-bed5-50238ca6183e",
                            "exec": [
                              "setTimeout(function(){}, 60 * 1000);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "434d2a98-c378-48e1-b49d-6e374b97b960",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"searchRequest\": {\n        \"filters\": [\n            {\n                \"name\": \"__ticket_comment__\",\n                \"values\": [\n                    \"{{reviewComment}}\"\n                ]\n            },\n            {\n                \"name\": \"__ticket_source__\",\n                \"values\": [\n                    \"{{GoogleSourceID}}\"\n                ]\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{searchTickets}}",
                        "description": "RBENT-74136:\n\n*   First waits for 3 mins and then search for ticket from google review."
                      },
                      "response": []
                    },
                    {
                      "name": "searchTickets from KIOSK Review",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "09853e1f-0eff-4bf9-941c-266cd9772a6a",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket ID\", function() {",
                              "    var json = pm.response.json()",
                              "    var ticketID = json.tickets[0].id;",
                              "    pm.globals.set('KioskticketID', ticketID)",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "4cc04edc-dfff-4f7d-8f83-c78a24a5db03",
                            "exec": [
                              "setTimeout(function(){}, 30 * 1000);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "63d5e941-f12e-46ad-8d79-3f4a41d33ee2",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"searchRequest\": {\n        \"filters\": [\n            {\n                \"name\": \"__ticket_comment__\",\n                \"values\": [\n                    \"{{kioskReviewComment}}\"\n                ]\n            },\n            {\n                \"name\": \"__ticket_source__\",\n                \"values\": [\n                    \"{{KIOSKSourceID}}\"\n                ]\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{searchTickets}}",
                        "description": "RBENT-75008:\n\n*   First waits for 30 secs and then search for ticket from kiosk review."
                      },
                      "response": []
                    }
                  ],
                  "id": "c21779f5-17f1-4484-b32b-bebfa3f9ead7"
                },
                {
                  "name": "TearDown",
                  "item": [
                    {
                      "name": "removeTicket from google review",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "d4540596-b01b-4ab0-8da8-a6430532d39b",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "a6e3b173-6972-4f00-b1c2-7de5ecfc0c66",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{GoogleticketID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeTicket from kiosk review",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "759b964c-e5d1-4e17-ad5e-88b82a2eccf8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "3d85458f-92f0-4054-932b-0702ba00050f",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{KioskticketID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}",
                        "description": "RBENT-75008:\n\n*   Remove Ticket created from Kiosk review."
                      },
                      "response": []
                    },
                    {
                      "name": "removeGoogleCredential",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "901d9f94-7bef-4ed9-8cbc-c0f2e618f1ac",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "02e94887-26d3-41c8-ad7a-377f0a5ea617",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"credentialID\": \"{{credID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-credential}}/{{removeCredential}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeLocationPages",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f2396f9f-9275-4136-98fb-d9fd6fca1e61",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "6080fb82-ba06-43f1-b34b-5d2eab33c905",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n      \"tenantID\": {{ActionsTenantID}}\n    },\n    \"locationPages\": {\n        \"locationUid\": \"{{lUId}}\",\n        \"locationID\": \"{{lId}}\",\n        \"code\": \"{{TenantActionsReviewsOneCode}}\",\n        \"pages\": [\n            {\n                \"sourceID\": \"{{GoogleSourceID}}\",\n                \"sourceUid\": \"{{GoogleSourceUiD}}\",\n                \"url\": \"{{GOOGLE_URL1}}\",\n                \"tenantID\": {{ActionsTenantID}},\n                \"agencyID\": {{ActionsAgencyID}}\n            },\n            {\n                \"sourceID\": \"{{KIOSKSourceID}}\",\n                \"sourceUid\": \"{{KIOSKSourceUiD}}\",\n                \"url\": \"{{KioskURL}}\",\n                \"tenantID\": {{ActionsTenantID}},\n                \"agencyID\": {{ActionsAgencyID}}\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-location-backend}}/{{removeLocationPages}}",
                        "description": "RBENT-74136 & RBENT-75008:\n\n*   Remove Location Pages for BOTH Google and KIOSK."
                      },
                      "response": []
                    },
                    {
                      "name": "removeGoogleLamdaByID",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "cf8d1a65-1c35-4a65-b84c-3b9f1447e115",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "1b03e003-7845-42b1-8300-a64d85d42a5d",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"lambdaID\": \"{{GooglelambdaID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-lambda}}/{{removeLambdaByID}}",
                        "description": "RBENT-74136\n\n*   Remove Lambda rule for Google Review."
                      },
                      "response": []
                    },
                    {
                      "name": "removeKioskLamdaByID",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "8c65105f-263c-4a76-bd52-6ecd2d8eef2c",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "8c6251c3-c608-4b65-943e-61da1889a22b",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"lambdaID\": \"{{KiosklambdaID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-lambda}}/{{removeLambdaByID}}",
                        "description": "RBENT-75008:\n\n*   Remove Lambda rule for KIOSK review."
                      },
                      "response": []
                    },
                    {
                      "name": "removeStage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "2578e946-a3ce-4df3-a808-5052856cbbf7",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "e490d2b8-6ccb-4667-a539-3970b7e0fbb6",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"stageID\": \"{{sID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeQueue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "fbb108d1-431c-4bf4-b84f-c5945e4462be",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "d01fd60a-bb53-4607-b187-bcd155596412",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"queueID\": \"{{qID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeQueue}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeTag",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "be5636d2-5c08-4b47-ba36-6686991a8aee",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "87ce2a5c-d5c0-4351-a28d-11bd05181291",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"tagID\": \"{{tID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTag}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeGoogleReview",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "9680c9ea-3464-43b0-a0f8-a5fcaa987dc9",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "4a8eaef2-0a9d-4ba9-85dc-8a6444dc39ce",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n    },\n    \"reviewID\": \"{{GooglereviewID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-review}}/{{removeReview}}",
                        "description": "RBENT-74136\n\n*   Remove Google Review."
                      },
                      "response": []
                    },
                    {
                      "name": "removeKioskReview",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "38447f36-c9a1-4b2f-8f5b-688618ab024f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "e49bbcbe-f30a-4206-b4b5-ef67ebc22d28",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n    },\n    \"reviewID\": \"{{KioskreviewID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-review}}/{{removeReview}}",
                        "description": "RBENT-74136\n\n*   Remove KIOSK Review."
                      },
                      "response": []
                    }
                  ],
                  "id": "28e568d4-4f89-4242-bfde-15f1374f0bcf"
                }
              ],
              "id": "9feb9084-5282-4922-aa17-75f56e8b6e1d"
            },
            {
              "name": "CreateTicketFromSurveys",
              "item": [
                {
                  "name": "Setup",
                  "item": [
                    {
                      "name": "searchRoles",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "34da96a3-b786-4e88-84fa-3f4c8ab14491",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "38c43d36-1aec-46f2-8b9f-e9689c04225d",
                            "exec": [
                              "pm.test(\"Verify Success code\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.response.responseCode).to.eql(\"Success\");",
                              "});",
                              "",
                              "pm.test(\"Capture roleIDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(jsonData);",
                              "    var rolesLength = jsonData.roles.length;",
                              "    pm.expect(rolesLength).to.above(0);",
                              "    for(let i = 0; i < rolesLength; i++) {",
                              "        if(jsonData.roles[i].name.toLowerCase() == 'admin') {",
                              "            pm.globals.set('rID', jsonData.roles[i].id);",
                              "            break;",
                              "        }",
                              "    }",
                              "    console.log('Captured Role ID = '+pm.globals.get('rID')); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "96cb9a17-fd99-4279-b778-e1e6115d361e",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"searchRequest\": {\n        \"filters\": []\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-admin}}/{{searchRoles}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveQueue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "2b56b2cd-e49e-4130-a25e-82714bb1c56e",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture queueID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('qID', jsonData.queue.id);",
                              "    console.log('Captured Queue ID = '+pm.globals.get('qID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "11bb4ad9-8b30-4825-b709-28e8c4110393",
                            "exec": [
                              "pm.globals.set('surveysQueue', 'Surveys Queue')"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "ab31b967-a7ca-47e2-b069-31dd8ca671d9",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"queue\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"{{surveysQueue}}\",\n        \"roleIDs\": [\n            \"{{rID}}\"\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveQueue}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveStage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "d5df2095-f6a5-4a0a-a392-8fb821945328",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture stageID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('sID', jsonData.stage.id);",
                              "    console.log('Captured Stage ID = '+pm.globals.get('sID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "946e196f-f40b-412e-917b-74ecc512d247",
                            "exec": [
                              "pm.globals.set('surveysStage', 'Surveys Stage')"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "a01ab16b-ba2a-4388-aeef-c3eca2057ba2",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"stage\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"{{surveysStage}}\",\n        \"system\": false,\n        \"order\": 12,\n        \"onHold\": false\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveTag",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "011f48de-b437-4ddf-8e97-3fd68d98938f",
                            "exec": [
                              "pm.globals.set('surveysTag', 'Surveys Tag')"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "ee4ad79e-6456-40cf-a224-d2df59bc29e4",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture stageID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('tID', jsonData.tag.id);",
                              "    console.log('Captured Tag ID = '+pm.globals.get('tID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "bc022270-b0b8-4501-90da-efd5ab9c4103",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"stage\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"{{surveysTag}}\",\n        \"system\": false\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveTag}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveSurvey3Template",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "0767fdbc-435f-4340-9029-0972f9112166",
                            "exec": [
                              "pm.globals.set('surveyTemplateID','5fbf54b11302cb09066055c9')"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "f073ce80-eb8f-4f9c-bfb1-f420f96fd54e",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "fccbcf39-0df2-4c54-b305-acc53d9de867",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"loggedTenantID\": -1,\n        \"loggedUserID\": -1,\n        \"tenantID\": {{ActionsTenantID}},\n        \"userID\": -1\n    },\n    \"surveyTemplate\": {\n        \"id\": \"{{surveyTemplateID}}\",\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Postman Automation Survey\",\n        \"banner\": {\n            \"texts\": {\n                \"en_US\": \"Customer Feedback Survey\"\n            },\n            \"disabled\": false\n        },\n        \"questions\": {\n            \"q2\": {\n                \"id\": \"q2\",\n                \"templateQuestionType\": \"Rating\",\n                \"texts\": {\n                    \"en_US\": \"Please rate your visit.\"\n                },\n                \"descriptions\": {\n                    \"en_US\": \"Click on a star to set a rating.\"\n                },\n                \"shared\": false,\n                \"subQuestions\": [\n                    {\n                        \"id\": \"sq3\",\n                        \"subQuestionType\": \"Rating\",\n                        \"subQuestionGroup\": \"NonMatrix\",\n                        \"viewModelConfigurations\": {\n                            \"en_US\": \"{\\\"max\\\":5,\\\"readonly\\\":false,\\\"starsonly\\\":true,\\\"labelonly\\\":false,\\\"disableScaleValue\\\":true,\\\"iconEmpty\\\":\\\"icon-star\\\",\\\"iconFull\\\":\\\"icon-star\\\",\\\"size\\\":\\\"large\\\",\\\"increment\\\":\\\"whole\\\",\\\"sentimentPositiveLabel\\\":\\\"Excellent\\\",\\\"sentimentNeutralLabel\\\":\\\"\\\",\\\"sentimentNegativeLabel\\\":\\\"Poor\\\",\\\"sentimentLabelType\\\":\\\"text\\\",\\\"textNoRating\\\":null}\"\n                        },\n                        \"isPII\": false,\n                        \"coefficient\": 0\n                    }\n                ],\n                \"filterable\": \"Secondary\",\n                \"randomizeChoices\": false\n            },\n            \"q10\": {\n                \"id\": \"q10\",\n                \"templateQuestionType\": \"TermsOfService\",\n                \"shared\": false,\n                \"subQuestions\": [\n                    {\n                        \"id\": \"sq11\",\n                        \"subQuestionType\": \"TermsOfService\",\n                        \"options\": [\n                            {\n                                \"id\": \"o12\",\n                                \"texts\": {\n                                    \"en_US\": \"I agree to the Terms of Service\"\n                                },\n                                \"selected\": false,\n                                \"other\": false\n                            }\n                        ],\n                        \"subQuestionGroup\": \"NonMatrix\",\n                        \"isPII\": false,\n                        \"publishableTOS\": true,\n                        \"validations\": [\n                            {\n                                \"validationType\": \"Required\",\n                                \"messages\": {\n                                    \"en_US\": \"An answer is required\"\n                                }\n                            }\n                        ],\n                        \"coefficient\": 0\n                    }\n                ],\n                \"filterable\": \"Secondary\",\n                \"randomizeChoices\": false\n            },\n            \"q13\": {\n                \"id\": \"q13\",\n                \"templateQuestionType\": \"ThankYou\",\n                \"shared\": false,\n                \"subQuestions\": [\n                    {\n                        \"id\": \"sq14\",\n                        \"subQuestionType\": \"ThankYou\",\n                        \"isPII\": false,\n                        \"coefficient\": 0\n                    }\n                ],\n                \"thankYouSourceSelection\": {\n                    \"sourceSelectionType\": \"Auto\"\n                },\n                \"filterable\": \"None\",\n                \"randomizeChoices\": false\n            },\n            \"q4\": {\n                \"id\": \"q4\",\n                \"templateQuestionType\": \"Heading\",\n                \"shared\": false,\n                \"subQuestions\": [\n                    {\n                        \"id\": \"sq5\",\n                        \"subQuestionType\": \"Heading\",\n                        \"subQuestionGroup\": \"NonMatrix\",\n                        \"isPII\": false,\n                        \"coefficient\": 0,\n                        \"titles\": {\n                            \"en_US\": \"We want to hear about your experience!\"\n                        },\n                        \"subtitles\": {\n                            \"en_US\": \"Please take a minute to rate our service and tell us about your recent visit.\"\n                        }\n                    }\n                ],\n                \"filterable\": \"None\",\n                \"randomizeChoices\": false\n            },\n            \"q15\": {\n                \"id\": \"q15\",\n                \"templateQuestionType\": \"Email\",\n                \"texts\": {\n                    \"en_US\": \"What is your email?\"\n                },\n                \"shared\": false,\n                \"subQuestions\": [\n                    {\n                        \"id\": \"sq16\",\n                        \"subQuestionType\": \"Comment\",\n                        \"subQuestionGroup\": \"NonMatrix\",\n                        \"placeholders\": {\n                            \"en_US\": \"Type your email here...\"\n                        },\n                        \"isPII\": true,\n                        \"validations\": [\n                            {\n                                \"validationType\": \"Required\",\n                                \"messages\": {\n                                    \"en_US\": \"An answer is required\"\n                                }\n                            },\n                            {\n                                \"validationType\": \"Email\",\n                                \"messages\": {\n                                    \"en_US\": \"Please enter a valid format.\"\n                                }\n                            }\n                        ],\n                        \"coefficient\": 0\n                    }\n                ],\n                \"filterable\": \"Secondary\",\n                \"randomizeChoices\": false\n            },\n            \"q6\": {\n                \"id\": \"q6\",\n                \"templateQuestionType\": \"NPS\",\n                \"texts\": {\n                    \"en_US\": \"Based on your experience; how likely are you to recommend our dealership to a friend, family member, or colleague?\"\n                },\n                \"shared\": false,\n                \"subQuestions\": [\n                    {\n                        \"id\": \"sq7\",\n                        \"subQuestionType\": \"NPS\",\n                        \"subQuestionGroup\": \"NonMatrix\",\n                        \"viewModelConfigurations\": {\n                            \"en_US\": \"{\\\"required\\\":false,\\\"readonly\\\":false,\\\"sentimentNegativeLabel\\\":\\\"Not Likely\\\",\\\"sentimentNeutralLabel\\\":\\\"\\\",\\\"sentimentPositiveLabel\\\":\\\"Very Likely\\\",\\\"sentimentLabelType\\\":\\\"text\\\",\\\"useNativeInputs\\\":false}\"\n                        },\n                        \"isPII\": false,\n                        \"coefficient\": 0\n                    }\n                ],\n                \"filterable\": \"Secondary\",\n                \"randomizeChoices\": false\n            },\n            \"q8\": {\n                \"id\": \"q8\",\n                \"templateQuestionType\": \"Comment\",\n                \"texts\": {\n                    \"en_US\": \"Please tell us about your experience.\"\n                },\n                \"shared\": false,\n                \"subQuestions\": [\n                    {\n                        \"id\": \"sq9\",\n                        \"subQuestionType\": \"Comment\",\n                        \"subQuestionGroup\": \"NonMatrix\",\n                        \"placeholders\": {\n                            \"en_US\": \"Type your comments here...\"\n                        },\n                        \"properties\": {\n                            \"0\": [\n                                \"5\"\n                            ]\n                        },\n                        \"isPII\": false,\n                        \"coefficient\": 0\n                    }\n                ],\n                \"filterable\": \"Secondary\",\n                \"randomizeChoices\": false\n            }\n        },\n        \"pages\": [\n            {\n                \"id\": \"p0\",\n                \"titles\": {\n                    \"en_US\": \"Page 1\"\n                },\n                \"questions\": [\n                    \"q6\",\n                    \"q2\",\n                    \"q8\",\n                    \"q15\",\n                    \"q10\"\n                ],\n                \"isLastPage\": false,\n                \"visibilityConfig\": {\n                    \"visibility\": \"Shown\"\n                }\n            },\n            {\n                \"id\": \"p1\",\n                \"titles\": {\n                    \"en_US\": \"Thank You Page\"\n                },\n                \"questions\": [\n                    \"q4\",\n                    \"q13\"\n                ],\n                \"jumpTargets\": [],\n                \"isLastPage\": true,\n                \"visibilityConfig\": {\n                    \"visibility\": \"Shown\"\n                }\n            }\n        ],\n        \"properties\": {\n            \"ShowQuestionNumbers\": \"true\",\n            \"ShowProgressBar\": \"true\",\n            \"ShowAsteriskForRequired\": \"true\",\n            \"DefaultLocale\": \"en_US\",\n            \"DeviceOptimized\": \"false\",\n            \"Kiosk\": \"false\",\n            \"HighQualityResultsOnly\": \"true\"\n        },\n        \"theme\": {\n            \"id\": \"1\",\n            \"backgroundImage\": \"default\",\n            \"styleSheets\": {\n                \"default\": \"\"\n            },\n            \"cssDeclarations\": {\n                \"r4e-survey-theme-title-mobile-letter-spacing\": \"0px\",\n                \"r4e-survey-theme-title-letter-spacing\": \"0px\"\n            }\n        },\n        \"templateStatus\": 0,\n        \"templateType\": 0,\n        \"standardWidget\": {\n            \"reviewerEmailQID\": \"sq16\",\n            \"overallRatingQIDs\": {\n                \"ratingQID\": \"sq3\"\n            },\n            \"npsQID\": \"sq7\",\n            \"commentQIDs\": [\n                \"sq9\"\n            ],\n            \"hideRating\": false,\n            \"hideSurveyTemplateName\": false\n        },\n        \"PIIExpirationDays\": 0,\n        \"supportedLocales\": [\n            \"en_US\"\n        ],\n        \"defaultLocale\": \"en_US\",\n        \"recomputing\": false,\n        \"nextUniqueId\": 17\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-survey3}}/{{saveSurveyTemplate}}",
                        "description": "RBENT-75009\n\n*   Save a survey3 template"
                      },
                      "response": []
                    },
                    {
                      "name": "saveSurveyLambda",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c0de7d9c-3f2f-487c-baf1-9edd92fe759b",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Lambda ID\", function() {",
                              "    var json = pm.response.json()",
                              "    var lambdaID = json.lambdat.id;",
                              "    pm.globals.set('lambdaID', lambdaID)",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "badf6dc8-b629-4a79-8ef7-0c19ca2943eb",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"userID\": -1,\n        \"loggedUserID\": -1,\n        \"loggedTenantID\": 1\n    },\n    \"tlambda\": {\n        \"agencyID\": {{ActionsAgencyID}},\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Postman Automation Survey\",\n        \"actions\": [\n            {\n                \"type\": \"ticket\",\n                \"parameters\": {\n                    \"__queueID__\": \"{{qID}}\",\n                    \"__sla__\": \"12\",\n                    \"__stageID__\": \"{{sID}}\"\n                }\n            }\n        ],\n        \"condition\": {\n            \"criterias\": [\n                {\n                    \"name\": \"code\",\n                    \"values\": [\n                        \"{{TenantActionsReviewsOneCode}}\"\n                    ],\n                    \"operator\": 4,\n                    \"logical\": \"And\"\n                },\n                {\n                    \"name\": \"surveyTemplateID\",\n                    \"values\": [\n                        \"{{surveyTemplateID}}\"\n                    ],\n                    \"operator\": 4,\n                    \"logical\": \"And\"\n                },\n                {\n                    \"name\": \"surveyResultTransition\",\n                    \"values\": [\n                        \"true\"\n                    ],\n                    \"operator\": 4,\n                    \"logical\": \"And\"\n                }\n            ]\n        },\n        \"eventType\": 2\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-lambda}}/{{saveLambda}}",
                        "description": "RBENT-75009\n\n*   Save Lambda rule for Surveys."
                      },
                      "response": []
                    }
                  ],
                  "id": "3dfc0325-791e-4986-8a84-7678e8470a4b"
                },
                {
                  "name": "Tests",
                  "item": [
                    {
                      "name": "saveSurvey3Result",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "a3186866-d1aa-4294-95b6-1ee534de20bb",
                            "exec": [
                              "setTimeout(function(){}, 10 * 1000);",
                              "var date = Date.now();",
                              "pm.globals.set('surveyDate', date)",
                              "",
                              "pm.globals.set('surveyComment', 'Survey Full Comment')",
                              "pm.globals.set('postmanAutomationEmail', 'postman@idcautomation.com')"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "afcc6e47-aed6-44e6-8c72-7b44fad8ad9a",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Survey Result ID\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    let id = jsonData.surveyResult.id;",
                              "    pm.globals.set('surveyResultID', id);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "515dd00b-144c-4250-922b-d7a7a3565bd9",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"surveyResult\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"locationCode\": \"{{TenantActionsReviewsOneCode}}\",\n        \"surveyTemplateID\": \"{{surveyTemplateID}}\",\n        \"surveyTakenDate\": \"{{surveyDate}}\",\n        \"templateStatus\": 0,\n        \"answers\": [\n            {\n                \"answerID\": \"sq3\",\n                \"answerValues\": [\n                    \"3.0\"\n                ]\n            },\n            {\n                \"answerID\": \"sq7\",\n                \"answerValues\": [\n                    \"3\"\n                ]\n            },\n            {\n                \"answerID\": \"sq9\",\n                \"answerValues\": [\n                    \"{{surveyComment}}\"\n                ]\n            },\n            {\n                \"answerID\": \"sq16\",\n                \"answerValues\": [\n                    \"{{postmanAutomationEmail}}\"\n                ]\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-survey3}}/{{saveSurveyResult}}",
                        "description": "RBENT-75009\n\n*   Initial delay of 10 secs\n*   Save Survey3 result"
                      },
                      "response": []
                    },
                    {
                      "name": "searchTickets with Source",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "76f9ddce-d2b1-4f59-9e0b-2c6404a5afba",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket ID\", function() {",
                              "    var json = pm.response.json()",
                              "    var ticketID = json.tickets[0].id;",
                              "    pm.globals.set('ticketID', ticketID)",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "83915db1-f09d-4c7c-9a5e-f7b8a709ed62",
                            "exec": [
                              "setTimeout(function(){}, 30 * 1000);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "a6ff7767-b205-4003-aff4-f677a6ba5003",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"searchRequest\": {\n        \"filters\": [\n             {\n                \"name\": \"__ticket_source__\",\n                \"values\": [\n                    \"{{SurveySourceID}}\"\n                ]\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{searchTickets}}",
                        "description": "RBENT-75009\n\n*   Initial delay of 30 sec\n*   Search for the ticket created from survey using source filter."
                      },
                      "response": []
                    },
                    {
                      "name": "searchTickets with reporter email",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "84c5c23d-a6ff-405d-a50c-19e1834e04e3",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket ID\", function() {",
                              "    var json = pm.response.json()",
                              "    var ticketID = json.tickets[0].id;",
                              "    pm.globals.set('ticketID', ticketID)",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "cb853f49-7023-485c-b1ae-fde014ce120b",
                            "exec": [
                              "setTimeout(function(){}, 5 * 1000);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "a346e731-47f1-4f9f-aca0-6531c25d913e",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"searchRequest\": {\n        \"filters\": [\n            {\n                \"name\": \"__ticket_reporter_email__\",\n                \"values\": [\n                    \"{{postmanAutomationEmail}}\"\n                ]\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{searchTickets}}",
                        "description": "RBENT-75009\n\n*   Initial delay of 5 sec\n*   Search for the ticket created from survey using 'reporter email' filter."
                      },
                      "response": []
                    }
                  ],
                  "id": "7461d3de-d9f8-46ba-9edb-2a4fb886ad83"
                },
                {
                  "name": "TearDown",
                  "item": [
                    {
                      "name": "removeTicket",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "7ee0206d-037a-46c3-902b-07f7d3a3a62d",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "73a1d69c-2a68-4f71-b649-1d914b64798a",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{ticketID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}",
                        "description": "RBENT-75009\n\n*   Remove ticket created from survey"
                      },
                      "response": []
                    },
                    {
                      "name": "removeLamdaByID",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "853c3341-63f0-4fc8-8abc-580b1fda49d8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "c02a0c51-d527-4d8d-ba15-d197fa4c6a21",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"lambdaID\": \"{{lambdaID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-lambda}}/{{removeLambdaByID}}",
                        "description": "RBENT-75009\n\n*   Remove Lambda rule created for surveys."
                      },
                      "response": []
                    },
                    {
                      "name": "removeSurvey3Result",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "a9613466-e063-4f87-8c2d-8c13bfabacbe",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "4bedda4c-8c30-4cf2-b46f-d10086b16894",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "b89d7df9-3fe4-464f-8095-e9318011a96e",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"surveyTemplateID\": \"{{surveyTemplateID}}\",\n    \"surveyID\" : \"{{surveyResultID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-survey3}}/{{removeSurveyResult}}",
                        "description": "RBENT-75009\n\n*   Remove survey 3 result"
                      },
                      "response": []
                    },
                    {
                      "name": "removeSurvey3Template",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c2de8870-17e5-45b0-8849-29dc3c73a1ca",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "e593087a-97ce-483b-a041-eb57b665d304",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"surveyTemplateID\": \"{{surveyTemplateID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-survey3}}/{{removeSurveyTemplate}}",
                        "description": "RBENT-75009\n\n*   Remove survey3 template"
                      },
                      "response": []
                    },
                    {
                      "name": "removeStage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "b3a4e694-8c87-4172-ab20-ee5b663154a5",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "e24ce793-573d-4f6d-9c41-e1850b8c5191",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"stageID\": \"{{sID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeQueue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "18e0a99f-4310-4b7d-a204-bbe11906db9e",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "90d23516-001d-4d8a-a134-0395887e583c",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"queueID\": \"{{qID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeQueue}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeTag",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "dcc296a7-d186-47d4-bfb1-d63f7322d9dc",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "a08dab02-c52b-4c10-ad7f-01d5f3518f96",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"tagID\": \"{{tID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTag}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "0c2189c9-b38a-41bd-ae72-747d383983c0"
                }
              ],
              "id": "a11fad1d-ef1b-41df-991b-b93362037692"
            },
            {
              "name": "Verify Post Code Label for en_GB locale",
              "item": [
                {
                  "name": "getAddressTemplate en_GB",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "3b19b697-010b-46bd-a2ae-cc6712e55641",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Verify Post Code Label\", function() {",
                          "    var jsonData = pm.response.json().template;",
                          "    for(let i = 0; i < jsonData.fields[2].length; i++) {",
                          "        let val = jsonData.fields[2][i];",
                          "        if(val.name == 'postalCode') {",
                          "            pm.expect(val.label).to.eql(\"Post Code\");",
                          "            break;",
                          "        }",
                          "    }",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "ad14e636-c4be-4016-ac67-457ec4b1d6c2",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"requestHeader\": {\n        \"locale\": \"en_GB\"\n    },\n    \"country\" : {\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "http://{{r4e-address}}/{{getAddressTemplate}}"
                  },
                  "response": []
                },
                {
                  "name": "getAddressTemplate en_US",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5ce7aa7a-ce61-4afa-a153-311fe10b3018",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Verify Post Code Label\", function() {",
                          "    var jsonData = pm.response.json().template;",
                          "    for(let i = 0; i < jsonData.fields[2].length; i++) {",
                          "        let val = jsonData.fields[2][i];",
                          "        if(val.name == 'postalCode') {",
                          "            pm.expect(val.label).to.eql(\"ZIP\");",
                          "            break;",
                          "        }",
                          "    }",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "79c53f2b-cff8-480b-8f0b-c51845ccf291",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"requestHeader\": {\n        \"locale\": \"en_US\"\n    },\n    \"country\" : {\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "http://{{r4e-address}}/{{getAddressTemplate}}"
                  },
                  "response": []
                }
              ],
              "id": "da5a3986-3d2b-4c8a-92f4-02bda4919d54",
              "description": "RBENT-74695:\n\nVerify \"Post Code\" label for en_GB locale"
            },
            {
              "name": "Overdue filter on closed tickets",
              "item": [
                {
                  "name": "Setup",
                  "item": [
                    {
                      "name": "getMainQueue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "258d5326-25be-41e8-b98f-2bc4f783191c",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify response and capture main queue Id\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.queues.length).to.equal(1);",
                              "    pm.variables.set('mainQueueId', jsonData.queues[0].id);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "a3f547ae-d64b-4ea1-ba3d-239af4c497f9",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"searchRequest\": {\n        \"filters\": [\n            {\n                \"name\": {{TicketQueueNameProjection}},\n                \"values\": [\n                    {{MainQueue}}\n                ]\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{searchQueues}}"
                      },
                      "response": []
                    },
                    {
                      "name": "getClosedStage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "258d5326-25be-41e8-b98f-2bc4f783191c",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify response and capture closed stage Id\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.stages.length).to.equal(1);",
                              "    pm.variables.set('closedStageId', jsonData.stages[0].id);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "2c076449-dcef-4b16-8e4b-7fddfe064366",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"searchRequest\": {\n        \"filters\": [\n            {\n                \"name\": {{TicketStageNameProjection}},\n                \"values\": [\n                    {{ClosedStage}}\n                ]\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{searchStages}}"
                      },
                      "response": []
                    },
                    {
                      "name": "getLocationByCode",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "624c43de-60ac-4676-b5c0-a04a27402ec5",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Location data\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.variables.set('locationId',jsonData.location.id);",
                              "    pm.variables.set('locationUid',jsonData.location.uid);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "a1014ff9-7bb1-47b6-8a60-8e32060c5b17",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "8b45a848-8f57-4b51-bd82-c3d0906dfb99",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"locationCode\": \"{{TenantActionsLocationOneCode}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-location-backend}}/{{getLocationByCode}}"
                      },
                      "response": []
                    },
                    {
                      "name": "getTenantSystemUser",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f56b6656-13ca-4fd5-9018-adaaf8df5271",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture tenant system user id\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.variables.set('tenantSystemUserID', jsonData.user.id)",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "27646e42-5972-4c43-b1dd-6c980fa64e44",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "27bbe9d7-aa9d-45a4-bc73-dc2419595a24",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"userID\": {{SystemUserID}}\n    },\n    \"tenantID\": {{ActionsTenantID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-user}}/{{getSystemUser}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveTicketClosedBeforeDueDate",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f56b6656-13ca-4fd5-9018-adaaf8df5271",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture ID of the ticket closed before due date\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.variables.set('ticketClosedBeforeDueDate', jsonData.ticket.id)",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "27646e42-5972-4c43-b1dd-6c980fa64e44",
                            "exec": [
                              "var hour = 60 * 60 * 1000;",
                              "var today = Date.now();",
                              "",
                              "var sla = 24;",
                              "var slaMillis = sla * hour;",
                              "var createdDate = today - (slaMillis / 2);",
                              "var dueDate = createdDate + slaMillis;",
                              "",
                              "pm.variables.set('createdDate', createdDate);",
                              "pm.variables.set('sla', sla);",
                              "pm.variables.set('dueDate', dueDate);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "6acb9d4b-06f8-405a-9258-75d0ed91d327",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"userID\": {{SystemUserID}}\n    },\n    \"ticket\": {\n        \"agencyID\": {{ActionsAgencyID}},\n        \"tenantID\": {{ActionsTenantID}},\n        \"locationUid\": {{locationUid}},\n        \"locationID\": \"{{locationId}}\",\n        \"ticketType\": 3,\n        \"queueID\": \"{{mainQueueId}}\",\n        \"stageID\": \"{{closedStageId}}\",\n        \"reporterName\": \"Reporter Dude1\",\n        \"comment\": \"A ticket created from postman, which was closed before due date.\",\n        \"level\": \"Tenant\",\n        \"createdDate\": {{createdDate}},\n        \"sla\": {{sla}},\n        \"dueDate\": {{dueDate}}\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveTicketClosedAfterDueDate",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f56b6656-13ca-4fd5-9018-adaaf8df5271",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture ID of the ticket closed after due date\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.variables.set('ticketClosedAfterDueDate', jsonData.ticket.id)",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "27646e42-5972-4c43-b1dd-6c980fa64e44",
                            "exec": [
                              "var hour = 60 * 60 * 1000;",
                              "var today = Date.now();",
                              "",
                              "var sla = 24;",
                              "var slaMillis = sla * hour;",
                              "var createdDate = today - (2 * slaMillis);",
                              "var dueDate = createdDate + slaMillis;",
                              "",
                              "pm.variables.set('createdDate', createdDate);",
                              "pm.variables.set('sla', sla);",
                              "pm.variables.set('dueDate', dueDate);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "446ec38c-4061-4b01-9d85-b1c3a5da12de",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"userID\": {{SystemUserID}}\n    },\n    \"ticket\": {\n        \"agencyID\": {{ActionsAgencyID}},\n        \"tenantID\": {{ActionsTenantID}},\n        \"locationUid\": {{locationUid}},\n        \"locationID\": \"{{locationId}}\",\n        \"ticketType\": 3,\n        \"queueID\": \"{{mainQueueId}}\",\n        \"stageID\": \"{{closedStageId}}\",\n        \"reporterName\": \"Reporter Dude1\",\n        \"comment\": \"A ticket created from postman, which was closed after due date.\",\n        \"level\": \"Tenant\",\n        \"createdDate\": {{createdDate}},\n        \"sla\": {{sla}},\n        \"dueDate\": {{dueDate}}\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveTicket}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "ea48ac07-9e0e-40e8-a04f-a04baa55db9f"
                },
                {
                  "name": "Tests",
                  "item": [
                    {
                      "name": "searchTicketsWithClosedStageAndOverdueFilter",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "7751f893-120a-43f7-b06f-33a4a5a5a05e",
                            "exec": [
                              "var currentMillis = Date.now();",
                              "",
                              "pm.variables.set('currentMillis', currentMillis);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "a00d3b07-ffec-4f5a-addf-67ef60a3ce1c",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify response and ticket closed after due date\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.tickets.length).to.equal(1);",
                              "    pm.expect(jsonData.tickets[0].id).to.equal(pm.variables.get('ticketClosedAfterDueDate'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "bcd476a3-ff91-4459-a706-74124a647452",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"userID\": {{tenantSystemUserID}}\n    },\n    \"searchRequest\": {\n        \"filters\": [\n            {\n                \"name\": \"__ticket_level__\",\n                \"values\": [\n                    \"Tenant\"\n                ]\n            },\n            {\n                \"name\": \"__ticket_location_uid__\",\n                \"values\": [\n                    \"{{locationUid}}\"\n                ]\n            },\n            {\n                \"name\": \"__ticket_ticketType__\",\n                \"values\": [\n                    \"UserDefined\"\n                ]\n            },\n            {\n                \"name\": \"__ticket_queueID__\",\n                \"values\": [\n                    \"{{mainQueueId}}\"\n                ]\n            },\n            {\n                \"name\": \"__ticket_stageID__\",\n                \"values\": [\n                    \"{{closedStageId}}\"\n                ]\n            },\n            {\n                \"name\": \"__ticket_dueDate__\",\n                \"values\": [\n                    \"{{currentMillis}}\"\n                ],\n                \"operator\": 2\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{searchTickets}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "5379640f-41ed-44e9-8675-d5eaedf560e5"
                },
                {
                  "name": "TearDown",
                  "item": [
                    {
                      "name": "removeTicketClosedBeforeDueDate",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c7045fc7-cb88-4491-a52b-79eb94f73421",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "02efde30-6bd0-418c-94b1-d7ee613d3dad",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"userID\": {{SystemUserID}}\n    },\n    \"ticketID\": {{ticketClosedBeforeDueDate}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeTicketClosedAfterDueDate",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c7045fc7-cb88-4491-a52b-79eb94f73421",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "239b1e39-3772-4908-9613-5c960e977f64",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"userID\": {{SystemUserID}}\n    },\n    \"ticketID\": {{ticketClosedAfterDueDate}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "363798a7-196f-4370-8df1-1f89d785bf1d"
                }
              ],
              "id": "a133f044-ab49-4363-8774-d765051238f2",
              "description": "**Fixes** [RBENT-73202](https://reputation.atlassian.net/browse/RBENT-73202)  \n**Automation** [RBENT-75041](https://reputation.atlassian.net/browse/RBENT-75041)\n\n**Expectation** - When applying *Closed* stage filter in conjunction with *Overdue* filter, Only tickets that were closed past their due date must be selected.\n\n**Detail** - Since platform doesn't support dynamic comparison of 2 fields while querying mongo db documents, a derived field ( closedOnTIme ) was added, which will be set to true when ticket is closed prior its sue date. The due date filter is swapped on the backend with closedOnTime filter when *Closed* Stage and *Overdue* filters are applied."
            }
          ],
          "id": "e0dcdfb4-6754-4ff1-922c-8e4401fd927c"
        },
        {
          "name": "external-apis",
          "item": [
            {
              "name": "ManualTicketCreation",
              "item": [
                {
                  "name": "Setup",
                  "item": [
                    {
                      "name": "Get Tenant API Key",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1c9c7827-6644-453e-b194-537fd3eed1a8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify and Set API Key\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log('apiKey = '+jsonData.apiKey);",
                              "    pm.globals.set(\"apiKey\", jsonData.apiKey);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "dad2ed81-dabe-47f1-856a-afbe6d14e368",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"tenantID\": {{ActionsTenantID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-admin}}/{{getTenantApiKey}}"
                      },
                      "response": []
                    },
                    {
                      "name": "getStages",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "b1e8131a-aa82-462b-9409-d79b9218de45",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify value type\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    var stageLength = jsonData.length;",
                              "    for(let i = 0; i < stageLength; i++) {",
                              "        let stage = jsonData[i];",
                              "        pm.expect(stage.id).to.be.a(\"string\");",
                              "        pm.expect(stage.name).to.be.a(\"string\");",
                              "        pm.expect(stage.order).to.be.a(\"number\");",
                              "        pm.expect(stage.tenantID).to.be.a(\"number\");",
                              "        pm.expect(stage.agencyID).to.be.a(\"number\");",
                              "        pm.expect(stage.onHold).to.be.a(\"boolean\");",
                              "        pm.expect(stage.system).to.be.a(\"boolean\");",
                              "    }",
                              "});",
                              "",
                              "pm.test(\"Capture Stage ID\", () => {",
                              "    var jsonData = pm.response.json();",
                              "    var stageLength = jsonData.length;",
                              "    for(let i = 0; i< stageLength; i++) {",
                              "        if(jsonData[i].name.toLowerCase() == pm.environment.get('OpenStage').toLowerCase()) {",
                              "            pm.globals.set('stageID', jsonData[i].id)",
                              "            break;",
                              "        }",
                              "    }",
                              "    console.log(\"Stage ID from External Api Key = \"+pm.globals.get('stageID'))",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "31d902ee-314e-4a24-a8ff-7013df9de4a4",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "x-api-key",
                            "value": "{{apiKey}}",
                            "type": "text"
                          }
                        ],
                        "url": "https://{{apiHost}}/{{v3_ticket_stages}}"
                      },
                      "response": []
                    },
                    {
                      "name": "getQueues",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "34884c3d-a80a-41dd-a710-e2d2e35a650d",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify value type\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    var queueLength = jsonData.length;",
                              "    for(let i = 0; i < queueLength; i++) {",
                              "        let queue = jsonData[i];",
                              "        pm.expect(queue.id).to.be.a(\"string\");",
                              "        pm.expect(queue.name).to.be.a(\"string\");",
                              "    }",
                              "});",
                              "",
                              "pm.test(\"Capture Queue ID\", () => {",
                              "    var jsonData = pm.response.json();",
                              "    var queueLength = jsonData.length;",
                              "    for(let i = 0; i< queueLength; i++) {",
                              "        if(jsonData[i].name.toLowerCase() == pm.environment.get('MainQueue').toLowerCase()) {",
                              "            pm.globals.set('queueID', jsonData[i].id)",
                              "            break;",
                              "        }",
                              "    }",
                              "    console.log(\"Queue ID from External Api Key = \"+pm.globals.get('queueID'))",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "4dc6ee74-ee58-4b7c-9ce4-62b27e0c34d5",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "x-api-key",
                            "value": "{{apiKey}}",
                            "type": "text"
                          }
                        ],
                        "url": "https://{{apiHost}}/{{v3_ticket_queues}}"
                      },
                      "response": []
                    },
                    {
                      "name": "getTicketDefinitions",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript",
                            "id": "7de045f7-d920-4ae4-a0f5-b1593338e145"
                          }
                        }
                      ],
                      "id": "c19b4c7a-c2cb-447e-8fb9-4307c2735de9",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "x-api-key",
                            "value": "{{apiKey}}",
                            "type": "text"
                          }
                        ],
                        "url": "https://{{apiHost}}/{{v3_ticket_types}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "89ecabff-bf8a-4d86-bc43-e5eb8dac57c5"
                },
                {
                  "name": "Tests",
                  "item": [
                    {
                      "name": "saveTicket",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "893dbd3d-d4b3-4141-89ae-03ceef49eb27",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket ID\", function() {",
                              "    pm.globals.set('XTID',jsonData.id);",
                              "})",
                              "",
                              "pm.test(\"Verify value types\", function () {",
                              "    pm.expect(jsonData.id).to.be.a(\"number\");",
                              "    pm.expect(jsonData.createdBy).to.be.a(\"number\");",
                              "    pm.expect(jsonData.updatedBy).to.be.a(\"number\");",
                              "    pm.expect(jsonData.reporterName).to.be.a(\"string\");",
                              "    pm.expect(jsonData.reporterEmail).to.be.a(\"string\");",
                              "    pm.expect(jsonData.reporterPhone).to.be.a(\"string\");",
                              "    pm.expect(jsonData.reporterPhone).to.be.a(\"string\");",
                              "    pm.expect(jsonData.comment).to.be.a(\"string\");",
                              "    pm.expect(jsonData.stageID).to.be.a(\"string\");",
                              "    pm.expect(jsonData.queueID).to.be.a(\"string\");",
                              "    pm.expect(jsonData.stageName).to.be.a(\"string\");",
                              "    pm.expect(jsonData.queueName).to.be.a(\"string\");",
                              "    pm.expect(jsonData.locationID).to.be.a(\"string\");",
                              "    pm.expect(jsonData.ticketType).to.be.a(\"string\");",
                              "})",
                              "",
                              "pm.test(\"Verify Response values\", function() {",
                              "    pm.expect(jsonData.stageID).to.eql(pm.globals.get(\"stageID\"))",
                              "    pm.expect(jsonData.queueID).to.eql(pm.globals.get(\"queueID\"))",
                              "    pm.expect(jsonData.stageName.toLowerCase()).to.eql(pm.environment.get(\"OpenStage\").toLowerCase())",
                              "    pm.expect(jsonData.queueName.toLowerCase()).to.eql(pm.environment.get(\"MainQueue\").toLowerCase())",
                              "    pm.expect(jsonData.locationID.toLowerCase()).to.eql(pm.environment.get(\"TenantActionsLocationOneCode\").toLowerCase())",
                              "    pm.expect(jsonData.comment.toLowerCase()).to.eql(pm.globals.get(\"comment\").toLowerCase())",
                              "    pm.expect(jsonData.reporterName.toLowerCase()).to.eql(pm.globals.get(\"reporterName\").toLowerCase())",
                              "    pm.expect(jsonData.reporterEmail.toLowerCase()).to.eql(pm.globals.get(\"reporterEmail\").toLowerCase())",
                              "    pm.expect(jsonData.reporterPhone.toLowerCase()).to.eql(pm.globals.get(\"reporterPhone\").toLowerCase())",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "470cc5b9-2ba2-4aa7-b803-803e5fbd2098",
                            "exec": [
                              "var date = Date.now();",
                              "pm.globals.set('dueDate', date);",
                              "pm.globals.set('comment', \"Postman Request added at \" + date);",
                              "console.log(pm.globals.get('comment'))",
                              "var reporterName = \"Postman Automation\"",
                              "var reporterEmail = \"postman@reputation.com\"",
                              "var reporterPhone = \"555-555-0100\"",
                              "pm.globals.set('reporterName', reporterName);",
                              "pm.globals.set('reporterEmail', reporterEmail);",
                              "pm.globals.set('reporterPhone', reporterPhone);",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "b6e2d8cc-d4b7-4faf-a1f1-2ac9e5c99be5",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "x-api-key",
                            "value": "{{apiKey}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"ticket\": {\n        \"reporterName\": \"{{reporterName}}\",\n        \"reporterEmail\": \"{{reporterEmail}}\",\n        \"reporterPhone\": \"{{reporterPhone}}\",\n        \"comment\": \"{{comment}}\",\n        \"stageID\": \"{{stageID}}\",\n        \"queueID\": \"{{queueID}}\",\n        \"dueDate\": \"{{dueDate}}\",\n        \"locationID\": \"{{TenantActionsLocationOneCode}}\"\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://{{apiHost}}/{{v3_tickets}}",
                        "description": "1.  save Ticket with mandatory fields.\n2.  Verifying response schema.\n3.  Validating response values."
                      },
                      "response": []
                    },
                    {
                      "name": "saveTickets for locationIds params",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "9375ea76-fd9f-4ea2-90e3-b5b939ebc359",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "let ticketIDs_LIDs = pm.globals.get(\"ticketIDs_LIDs\");",
                              "",
                              "if(ticketIDs_LIDs && ticketIDs_LIDs.length > 0) {",
                              "    postman.setNextRequest('saveTickets for locationIds params')",
                              "}",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket IDs\", function() {",
                              "    let tIDs_LID = pm.globals.get('tIDs_LID');",
                              "    if(!tIDs_LID || tIDs_LID.length == 0){",
                              "        let ids = []",
                              "        ids.push(jsonData.id);",
                              "        pm.globals.set('tIDs_LID', ids)",
                              "    }",
                              "    else {",
                              "        tIDs_LID.push(jsonData.id);",
                              "        pm.globals.set('tIDs_LID', tIDs_LID);",
                              "    }",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "1da6200a-76eb-42a9-854e-6fbd795782df",
                            "exec": [
                              "var date = Date.now();",
                              "pm.globals.set('dueDate', date);",
                              "pm.globals.set('comment', \"Postman Request added at \" + date);",
                              "console.log(pm.globals.get('comment'))",
                              "var reporterName = \"Postman Automation\"",
                              "var reporterEmail = \"postman@reputation.com\"",
                              "var reporterPhone = \"555-555-0100\"",
                              "pm.globals.set('reporterName', reporterName);",
                              "pm.globals.set('reporterEmail', reporterEmail);",
                              "pm.globals.set('reporterPhone', reporterPhone);",
                              "",
                              "let ticketIDs_LIDs = pm.globals.get(\"ticketIDs_LIDs\");",
                              "",
                              "if(!ticketIDs_LIDs || ticketIDs_LIDs.length == 0) {",
                              "    ticketIDs_LIDs = [pm.environment.get('TenantActionsLocationOneCode'), pm.environment.get('TenantActionsLocationID1'), pm.environment.get('TenantActionsLocationID2')]",
                              "}",
                              "",
                              "let currentLID = ticketIDs_LIDs.shift();",
                              "console.log(currentLID)",
                              "pm.globals.set('currentLID', currentLID);",
                              "pm.globals.set('ticketIDs_LIDs', ticketIDs_LIDs)"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "9f40dc2c-2d83-4200-ac48-6f3ce3c6b9fa",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "x-api-key",
                            "value": "{{apiKey}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"ticket\": {\n        \"reporterName\": \"{{reporterName}}\",\n        \"reporterEmail\": \"{{reporterEmail}}\",\n        \"reporterPhone\": \"{{reporterPhone}}\",\n        \"comment\": \"{{comment}}\",\n        \"stageID\": \"{{stageID}}\",\n        \"queueID\": \"{{queueID}}\",\n        \"dueDate\": \"{{dueDate}}\",\n        \"locationID\": \"{{currentLID}}\"\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "https://{{apiHost}}/{{v3_tickets}}",
                        "description": "RBENT-68463:\n\nsaving ticket with 3 different locations and use getTickets with all the locationIDs params."
                      },
                      "response": []
                    },
                    {
                      "name": "getTickets",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "9ab4d9f1-8976-48ea-9de4-b6c14797a9c8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Console ticket response\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    var ticketsLength = jsonData.length;",
                              "    for(let i = 0; i < ticketsLength; i++) {",
                              "        if(pm.globals.get('XTID') == jsonData[i].id) {",
                              "            console.log(\"Saved Ticket Response = \"+jsonData[i])",
                              "            break;",
                              "        }",
                              "    }",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "79dd25ca-cac9-4532-b9e1-a1f4e4061469",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "x-api-key",
                            "value": "{{apiKey}}",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "raw": "https://{{apiHost}}/{{v3_tickets}}?range=Today",
                          "protocol": "https",
                          "host": [
                            "{{apiHost}}"
                          ],
                          "path": [
                            "{{v3_tickets}}"
                          ],
                          "query": [
                            {
                              "key": "range",
                              "value": "Today"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "getTickets with locationIds params",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "0644ae75-ad88-427b-8dc4-796cfcb4fb10",
                            "exec": [
                              "let LIDCombo = pm.globals.get('LIDCombo');",
                              "",
                              "if(LIDCombo && LIDCombo.length > 0) {",
                              "    postman.setNextRequest('getTickets with locationIds params')",
                              "}",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify Location IDs in ticket response\", function() {",
                              "    var tickets = pm.response.json().tickets;",
                              "    let arr = pm.globals.get('currentLocationIDs').split(',');",
                              "    if(!tickets || tickets.length == 0) {",
                              "        return;",
                              "    }",
                              "    for(let i = 0; i < tickets.length; i++) {",
                              "        pm.expect(arr).to.include(tickets[i].locationID)",
                              "    }",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "59f17557-b2c5-4c93-aecc-c1b058ece9db",
                            "exec": [
                              "let LIDCombo = pm.globals.get('LIDCombo');",
                              "",
                              "if(!LIDCombo || LIDCombo.length == 0) {",
                              "    let one = pm.environment.get('TenantActionsLocationOneCode')",
                              "    let two = pm.environment.get('TenantActionsLocationID1')",
                              "    let three = pm.environment.get('TenantActionsLocationID2')",
                              "    LIDCombo = [ one, two, three, one+','+two, two+','+three, three+','+one ]",
                              "}",
                              "",
                              "let currentLocationIDs = LIDCombo.shift();",
                              "console.log(currentLocationIDs);",
                              "pm.globals.set('currentLocationIDs', currentLocationIDs)",
                              "pm.globals.set('LIDCombo', LIDCombo)"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "ed721ec0-2711-4bcf-abc1-045c437be7b5",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "x-api-key",
                            "value": "{{apiKey}}",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "raw": "https://{{apiHost}}/{{v3_tickets}}?range=Today&locationIds={{currentLocationIDs}}",
                          "protocol": "https",
                          "host": [
                            "{{apiHost}}"
                          ],
                          "path": [
                            "{{v3_tickets}}"
                          ],
                          "query": [
                            {
                              "key": "range",
                              "value": "Today"
                            },
                            {
                              "key": "locationIds",
                              "value": "{{currentLocationIDs}}"
                            }
                          ]
                        },
                        "description": "RBENT-68463:\n\nGET call with locationIds params and verify the results contains tickets in that location."
                      },
                      "response": []
                    }
                  ],
                  "id": "0396b37f-8900-4a20-8a39-a92409a575dd"
                },
                {
                  "name": "TearDown",
                  "item": [
                    {
                      "name": "removeTicket",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript",
                            "id": "688e7a9b-c293-4c9e-a282-0a21ac497801"
                          }
                        }
                      ],
                      "id": "1e6673c7-9b90-4d4a-8d68-93c837fa6266",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{XTID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeTicket for location Ids params",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "b7ec8496-9a23-40da-a10c-6bba402b5c92",
                            "exec": [
                              "let lID_tIDs = pm.globals.get('tIDs_LID');",
                              "",
                              "if(lID_tIDs && lID_tIDs.length > 0) {",
                              "    postman.setNextRequest('removeTicket for location Ids params')",
                              "}",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "7a9f5788-f3d9-424e-a6dd-09b147f7e4ae",
                            "exec": [
                              "let lID_tIDs = pm.globals.get('tIDs_LID');",
                              "",
                              "if(!lID_tIDs || lID_tIDs.length == 0) {",
                              "    postman.setNextRequest(null);",
                              "}",
                              "",
                              "let lID_tID = lID_tIDs.shift();",
                              "pm.globals.set('tIDs_LID', lID_tIDs);",
                              "pm.globals.set('lID_tID', lID_tID)"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "0252397a-5aa4-438b-8cf2-df5288e61fbf",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{lID_tID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}",
                        "description": "RBENT-68463:\n\nremove all tickets created in 3 different locations used for verifying locationIds param."
                      },
                      "response": []
                    }
                  ],
                  "id": "47e2966d-78d6-4aae-8346-7363aaa9c575"
                }
              ],
              "id": "70231188-0eaa-4933-8824-a04c99328d39"
            },
            {
              "name": "Verify Escalation due in automation rules",
              "item": [
                {
                  "name": "Setup",
                  "item": [
                    {
                      "name": "Get Tenant API Key",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1c9c7827-6644-453e-b194-537fd3eed1a8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify and Set API Key\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log('apiKey = '+jsonData.apiKey);",
                              "    pm.globals.set(\"apiKey\", jsonData.apiKey);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "3d5f386d-60df-4a5a-a52a-0c67aed9877a",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"tenantID\": {{ActionsTenantID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-admin}}/{{getTenantApiKey}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveStage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "a481cff4-d38b-437b-abc5-a39e5268d7e5",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture stageID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('initStageID', jsonData.stage.id);",
                              "    console.log('Captured Stage ID = '+pm.globals.get('initStageID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "a6e502f1-40c3-41ae-9ae4-2ddf830334a7",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "20aa972f-ccfa-4ac3-96cf-98a0062e7ba5",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"stage\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Stage One\",\n        \"system\": false,\n        \"order\": 10,\n        \"onHold\": false\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveStage -Escalated",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "a481cff4-d38b-437b-abc5-a39e5268d7e5",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture stageID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('escalatedSID', jsonData.stage.id);",
                              "    console.log('Captured Escalated Stage ID = '+pm.globals.get('escalatedSID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "d8e6480f-fdaf-4839-b19e-4c5529505c09",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"stage\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Escalated Stage\",\n        \"system\": false,\n        \"order\": 11,\n        \"onHold\": false\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "searchRoles",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "dac590b2-fcbc-4c35-bcff-075eb80e1a65",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "ab0747cd-5e8c-4c16-b6b9-0c1f8a91b6c0",
                            "exec": [
                              "pm.test(\"Verify Success code\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.response.responseCode).to.eql(\"Success\");",
                              "});",
                              "",
                              "pm.test(\"Capture roleIDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(jsonData);",
                              "    var rolesLength = jsonData.roles.length;",
                              "    pm.expect(rolesLength).to.above(0);",
                              "    for(let i = 0; i < rolesLength; i++) {",
                              "        if(jsonData.roles[i].name.toLowerCase() == 'admin') {",
                              "            pm.globals.set('rID', jsonData.roles[i].id);",
                              "            break;",
                              "        }",
                              "    }",
                              "    console.log('Captured Role ID = '+pm.globals.get('rID')); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "08b014a8-254a-4d22-b136-b8c46fa20858",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"searchRequest\": {\n        \"filters\": []\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-admin}}/{{searchRoles}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveQueue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "b6a7c409-1a56-470f-acb5-d06a556570c7",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture queueID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('qID', jsonData.queue.id);",
                              "    console.log('Captured Queue ID = '+pm.globals.get('qID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "a42cdbdc-9548-4b4f-99e2-0c427507105b",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"queue\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Test Queue\",\n        \"roleIDs\": [\n            \"{{rID}}\"\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveQueue}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveQueue-Escalated",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "b6a7c409-1a56-470f-acb5-d06a556570c7",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture queueID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('escalationQID', jsonData.queue.id);",
                              "    console.log('Captured Escalated Queue ID = '+pm.globals.get('escalationQID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "a9f4ef9b-3921-460f-ba40-9ebdeb15dbfd",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"queue\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Escalation Queue\",\n        \"roleIDs\": [\n            \"{{rID}}\"\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveQueue}}"
                      },
                      "response": []
                    },
                    {
                      "name": "getLocationByCode",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "624c43de-60ac-4676-b5c0-a04a27402ec5",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Location IDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('lId',jsonData.location.id);",
                              "    pm.globals.set('lUId',jsonData.location.uid);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "a1014ff9-7bb1-47b6-8a60-8e32060c5b17",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "e78f8b15-ecde-4cb9-a01b-395009e6f3dd",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"locationCode\": \"{{TenantActionsLocationOneCode}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-location-backend}}/{{getLocationByCode}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveTicket",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f56b6656-13ca-4fd5-9018-adaaf8df5271",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket ID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('escalationTicketID', jsonData.ticket.id)",
                              "})",
                              "",
                              "pm.test(\"Console Comment\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(jsonData.ticket.comment);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "27646e42-5972-4c43-b1dd-6c980fa64e44",
                            "exec": [
                              "var today = new Date();",
                              "today.setHours(today.getHours() + 1);",
                              "today.setMinutes(today.getMinutes()+ 1);",
                              "var onehrPostDate=today;",
                              "pm.globals.set(\"onehrPostDate\",onehrPostDate.valueOf());",
                              "",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "85e5e35c-960c-4df0-b650-9c1a8ced9009",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"ticket\": {\n        \"locationID\": \"{{lId}}\",\n        \"dueDate\": \"{{onehrPostDate}}\",\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"locationUid\": {{lUId}},\n        \"ticketType\": \"UserDefined\",\n        \"queueID\": \"{{qID}}\",\n        \"stageID\": \"{{initStageID}}\",\n        \"responded\": false,\n        \"pendingApproval\": false,\n        \"comment\": \"sample\",\n        \"reporterName\": \"Postman Automation\",\n        \"level\": \"Tenant\",\n        \"tags\": [],\n        \"userDefined\": {\n            \"sentiment\": \"Positive\"\n        }\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "SaveEscalation",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1c9c7827-6644-453e-b194-537fd3eed1a8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify and Set Escalation ID\", function () {",
                              "    var jsonData = pm.response.json(); ",
                              "    pm.globals.set(\"escalationID\", jsonData.escalation.id);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "ee57f1ac-e584-46da-997f-da8aecd1d810",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"escalation\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Escalate by 1Hour\",\n        \"dueIn\": 1\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveEscalation}}",
                        "description": "Create an escalation due in 1 Hour"
                      },
                      "response": []
                    },
                    {
                      "name": "Save Automation Rule",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "8b53ad32-ae03-44e5-97d3-de4891077aa8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Lambda IDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('escalationLambdaID',jsonData.lambdat.id); ",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "1b46ca19-d27d-45ed-899e-5172cf388c45",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "c74f794b-f50c-49e3-b3c5-8ef95d5075cd",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "authority",
                            "value": "app.qa.reputation.com"
                          },
                          {
                            "key": "sec-ch-ua",
                            "value": "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"98\", \"Google Chrome\";v=\"98\""
                          },
                          {
                            "key": "accept",
                            "value": "application/json, text/plain, */*"
                          },
                          {
                            "key": "locale",
                            "value": "en_US"
                          },
                          {
                            "key": "sec-ch-ua-mobile",
                            "value": "?0"
                          },
                          {
                            "key": "content-type",
                            "value": "application/json;charset=UTF-8"
                          },
                          {
                            "key": "user-agent",
                            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.109 Safari/537.36"
                          },
                          {
                            "key": "sec-ch-ua-platform",
                            "value": "\"macOS\""
                          },
                          {
                            "key": "origin",
                            "value": "https://app.qa.reputation.com"
                          },
                          {
                            "key": "sec-fetch-site",
                            "value": "same-origin"
                          },
                          {
                            "key": "sec-fetch-mode",
                            "value": "cors"
                          },
                          {
                            "key": "sec-fetch-dest",
                            "value": "empty"
                          },
                          {
                            "key": "referer",
                            "value": "https://app.qa.reputation.com/admin/agencies/1/tenants/216438/automation/add"
                          },
                          {
                            "key": "accept-language",
                            "value": "en-GB,en-US;q=0.9,en;q=0.8"
                          },
                          {
                            "key": "cookie",
                            "value": "liveagent_oref=; liveagent_sid=c3024195-3193-4367-b296-61f984c17416; liveagent_vc=2; liveagent_ptid=c3024195-3193-4367-b296-61f984c17416; utag_qp_historic=utm_source:$utm_medium:$utm_campaign:$utm_content:$utm_term:$gclid:$msclkid:$fbclid:; optimizelyEndUserId=oeu1646967598493r0.413080464204977; _ga=GA1.2.440298482.1646967600; _gcl_au=1.1.2094668691.1646967600; __qca=P0-1974784897-1646967599115; _hjSessionUser_1063923=eyJpZCI6ImQ2ZTM4ZWQ0LTVjNTMtNWU2ZS04NjE2LWY0YzU4NzU1ODRjNiIsImNyZWF0ZWQiOjE2NDY5Njc2MDEzMTgsImV4aXN0aW5nIjp0cnVlfQ==; intercom-id-l7x8v220=f2d4b094-c125-4c74-a61d-7cca8cf12413; amplitude_id_8071ea7a0bcbdb2ca3604824502a50a9reputation.com=eyJkZXZpY2VJZCI6IjU1OTBjNjYzLTE4OWMtNDA4Ny05YTJhLWVhZTZkZDBkZmEwNFIiLCJ1c2VySWQiOiI0NjM1NjkxIiwib3B0T3V0IjpmYWxzZSwic2Vzc2lvbklkIjoxNjQ3MjU5NDQyMDM3LCJsYXN0RXZlbnRUaW1lIjoxNjQ3MjU5NTQzODczLCJldmVudElkIjo0NzYsImlkZW50aWZ5SWQiOjQ3NCwic2VxdWVuY2VOdW1iZXIiOjk1MH0=; intercom-session-l7x8v220=UHFCUnV6cm9aRWs1dEJKbEJLZ0UrQkJidXhXWmo3enEzZlRSR1NtVGRZR0QrdG4vSm90Q0FYb0QyaktGR1AwaS0tZjVtZ1A2cnI0cHVSK3NoaGNCTmUwdz09--02966ea87e8976404f2f6e9b6d29bce46c7a26b3; utag_main=v_id:017f76eb2c77001f61ef1490a1a505079001f07100b7e$_sn:2$_se:1$_ss:1$_st:1647261774901$dc_visit:2$ses_id:1647259974901%3Bexp-session$_pn:1%3Bexp-session$dc_event:1%3Bexp-session$dc_region:ap-east-1%3Bexp-session; connect.sid=s%3AyuhVbMm11Aa7ULNhe85SApfNxisju9II.EcdOHwiIzxr0Nw4rksQOq%2FRhtXXFKPsD%2F6ulyyqsIa8; rm=s%3A21d200968e22a1a84454c51ed423386ff27a1329529643f5d65860c1ef71d80ca4d673c57d4ae70f16c1b3345ae61f87d0d141e69e0cd39990241a37c0210eea080192a33abcb829218d49541fab446b88b7c163d869157b46383448ae45db42a9280b499a7009060d5b45d1e9a6b8b04bd97d4199f70f257f4133ddf6d6d3fbef4b03dc5cd84f19626ec93b159fdbfa9ac64fa79b87d3059280e75282186f76b2aa60e5ec72dc98ff8a539ae9ee23651541aa7d73728c5e149628b7778714393ecda65b78fb7b20e3a5a8d2cabcf83d56e4e146b7c0d5c7d7304e77d21b008fe4374f6c47df7dc2108d02942b5a7c.CbfOQGaiK0vRbioIAOnTulze89e82ft667%2Bd3EYvlcQ; intercom-session-tl7nkdko=ZkpoTkpmS083Q3BCZFIwU3Q5aFJ2aFRTdThyV3VOek1JeWdSV3VJa3ZjcFdzekNrNDVpcWdyWFI2TmxIMjVKQS0tNmt4d1FQMDcvYm1ienlYMGMvallBdz09--ce97d5a7502ae49f74f1c05a1b5e13955ea22dd7; amplitude_id_3ef2d9c5d1043968aeb9e2bb0c7b35cereputation.com=eyJkZXZpY2VJZCI6ImRmYzFkOTg0LWE5NjctNDc2ZS05NmQ5LTYyODExYzMyNzg3YlIiLCJ1c2VySWQiOiI1MjAxMzE1Iiwib3B0T3V0IjpmYWxzZSwic2Vzc2lvbklkIjoxNjQ3NDEwOTU4ODI3LCJsYXN0RXZlbnRUaW1lIjoxNjQ3NDEyODA5NjYwLCJldmVudElkIjoxMDMsImlkZW50aWZ5SWQiOjEwMywic2VxdWVuY2VOdW1iZXIiOjIwNn0="
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n     \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"lambda\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"eventType\": 6,\n        \"name\": \"Rule for Escalation by 1hr \",\n        \"condition\": {\n            \"criterias\": [\n                {\n                    \"name\": \"escalation\",\n                    \"values\": [\n                        \"{{escalationID}}\"\n                    ],\n                    \"operator\": 4,\n                    \"logical\": 1\n                }\n            ]\n        },\n        \"actions\": [\n            {\n                \"type\": \"updateTicket\",\n                \"parameters\": {\n                    \"__queueID__\": {{escalationQID}},\n                    \"__stageID__\": {{escalatedSID}},\n                    \"__sla__\": \"24\"\n                }\n            }\n        ],\n        \"enabled\": true\n    }\n}"
                        },
                        "url": "http://{{r4e-lambda}}/{{saveLambda}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "932cecda-aa89-4c7d-ab76-1db131ef20ba"
                },
                {
                  "name": "Tests",
                  "item": [
                    {
                      "name": "RBENT-74372",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "8709394f-2b92-4c17-a95c-9ecf8b93e9db",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify Stage and Queue ID\", function () { ",
                              "    var jsonData = pm.response.json(); ",
                              "    pm.expect(jsonData.ticket.queueID).to.eq(pm.globals.get('escalationQID'));",
                              "    pm.expect(jsonData.ticket.stageID).to.eq(pm.globals.get('escalatedSID'));",
                              "    ",
                              "})",
                              " ",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "43d652b6-88ab-4564-b06e-967c4b2df301",
                            "exec": [
                              "setTimeout(function(){}, [180000]);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "e5d0de5e-b27c-4077-9a60-efcad0f022fb",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{escalationTicketID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{getTicket}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "dd9be264-2bd9-4fb4-af70-d54b0e58a523"
                },
                {
                  "name": "TearDown",
                  "item": [
                    {
                      "name": "removeTicket",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c7045fc7-cb88-4491-a52b-79eb94f73421",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "da250652-081f-4c53-80a0-a0497e97a991",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{escalationTicketID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeStage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript",
                            "id": "0c98a341-2e8d-4b27-bff7-ef007c65def2"
                          }
                        }
                      ],
                      "id": "8d8c5aaf-5232-4deb-a39d-cb909cf8f30a",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"stageID\": \"{{initStageID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeStage -Escalated",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript",
                            "id": "0c98a341-2e8d-4b27-bff7-ef007c65def2"
                          }
                        }
                      ],
                      "id": "b4b8be28-eb65-4072-aa14-8213543c7a40",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"stageID\": \"{{escalatedSID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeQueue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript",
                            "id": "c32cf087-a4f4-4fce-afc6-3660a4668a1d"
                          }
                        }
                      ],
                      "id": "340d07b8-af57-4868-8479-0e69b71fb50f",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"queueID\": \"{{qID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeQueue}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeQueue -Escalated",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c32cf087-a4f4-4fce-afc6-3660a4668a1d",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "5ed63134-8c7e-4a98-9036-b272b174f537",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"queueID\": \"{{escalationQID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeQueue}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Remove Automation rule",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "853c3341-63f0-4fc8-8abc-580b1fda49d8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "1aba715c-8a88-460e-95e7-e3b5db8db483",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"lambdaID\": \"{{escalationLambdaID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-lambda}}/{{removeLambdaByID}}",
                        "description": "RBENT-75009\n\n*   Remove Lambda rule created for surveys."
                      },
                      "response": []
                    },
                    {
                      "name": "RemoveEscalation",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1c9c7827-6644-453e-b194-537fd3eed1a8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Remove Escalation\", function () {",
                              "    var jsonData = pm.response.json(); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "589700b6-54bc-4701-886b-b570904c5ec3",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"escalationID\":\"{{escalationID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeEscalation}}",
                        "description": "Create an escalation due in 1 Hour"
                      },
                      "response": []
                    }
                  ],
                  "id": "4c6c93cb-e7a7-4d2e-b3ec-15f02d17ee11"
                }
              ],
              "id": "7d5cc1f0-e81d-4303-b5a4-0841c74faaf2",
              "description": "RBENT-74372\n\nVerify that when a ticket is due by an hour then automation rules are triggering and ticket is getting updated"
            },
            {
              "name": "Verify Escalation Overdue in automation rules",
              "item": [
                {
                  "name": "Setup",
                  "item": [
                    {
                      "name": "Get Tenant API Key",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1c9c7827-6644-453e-b194-537fd3eed1a8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify and Set API Key\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log('apiKey = '+jsonData.apiKey);",
                              "    pm.globals.set(\"apiKey\", jsonData.apiKey);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "3963740c-6512-4ea0-9b48-f0d1406c1c63",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"tenantID\": {{ActionsTenantID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-admin}}/{{getTenantApiKey}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveStage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "a481cff4-d38b-437b-abc5-a39e5268d7e5",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture stageID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('initStageID', jsonData.stage.id);",
                              "    console.log('Captured Stage ID = '+pm.globals.get('initStageID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "a6e502f1-40c3-41ae-9ae4-2ddf830334a7",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "0cdfdf9b-18de-46d1-94a2-7b1f745f525a",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"stage\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Stage Init\",\n        \"system\": false,\n        \"order\": 12,\n        \"onHold\": false\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "searchRoles",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "dac590b2-fcbc-4c35-bcff-075eb80e1a65",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "ab0747cd-5e8c-4c16-b6b9-0c1f8a91b6c0",
                            "exec": [
                              "pm.test(\"Verify Success code\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.response.responseCode).to.eql(\"Success\");",
                              "});",
                              "",
                              "pm.test(\"Capture roleIDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(jsonData);",
                              "    var rolesLength = jsonData.roles.length;",
                              "    pm.expect(rolesLength).to.above(0);",
                              "    for(let i = 0; i < rolesLength; i++) {",
                              "        if(jsonData.roles[i].name.toLowerCase() == 'admin') {",
                              "            pm.globals.set('rID', jsonData.roles[i].id);",
                              "            break;",
                              "        }",
                              "    }",
                              "    console.log('Captured Role ID = '+pm.globals.get('rID')); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "525e5639-6b4e-4598-8111-0eb82649e3c7",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"searchRequest\": {\n        \"filters\": []\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-admin}}/{{searchRoles}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveQueue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "b6a7c409-1a56-470f-acb5-d06a556570c7",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture queueID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('qID', jsonData.queue.id);",
                              "    console.log('Captured Queue ID = '+pm.globals.get('qID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "074eae49-07ab-4625-aec0-a98dee889ca6",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"queue\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Test Queue\",\n        \"roleIDs\": [\n            \"{{rID}}\"\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveQueue}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveQueue-Overdue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "b6a7c409-1a56-470f-acb5-d06a556570c7",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture queueID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('overdueQueueID', jsonData.queue.id);",
                              "    console.log('Captured Escalated Queue ID = '+pm.globals.get('overdueQueueID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "e52fb3f4-a503-4834-8097-4219e2cf0985",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"queue\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"OverDue Queue\",\n        \"roleIDs\": [\n            \"{{rID}}\"\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveQueue}}",
                        "description": "Queue to which ticket will be moved once overdue"
                      },
                      "response": []
                    },
                    {
                      "name": "getLocationByCode",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "624c43de-60ac-4676-b5c0-a04a27402ec5",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Location IDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('lId',jsonData.location.id);",
                              "    pm.globals.set('lUId',jsonData.location.uid);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "a1014ff9-7bb1-47b6-8a60-8e32060c5b17",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "de453512-bb90-40bb-befb-7071e8b91dae",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"locationCode\": \"{{TenantActionsLocationOneCode}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-location-backend}}/{{getLocationByCode}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveTicket",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f56b6656-13ca-4fd5-9018-adaaf8df5271",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket ID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('escalationTicketID', jsonData.ticket.id)",
                              "})",
                              "",
                              "pm.test(\"Console Comment\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(jsonData.ticket.comment);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "27646e42-5972-4c43-b1dd-6c980fa64e44",
                            "exec": [
                              "var today = new Date();",
                              "today.setHours(today.getHours() -1);",
                              "today.setMinutes(today.getMinutes()-10);",
                              "var onehrOverDueDate=today;",
                              "pm.globals.set(\"onehrOverDueDate\",onehrOverDueDate.valueOf());",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "088f58da-8866-4716-898f-0de25fef082e",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"ticket\": {\n        \"locationID\": \"{{lId}}\",\n        \"dueDate\": \"{{onehrOverDueDate}}\",\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"locationUid\": {{lUId}},\n        \"ticketType\": \"UserDefined\",\n        \"queueID\": \"{{qID}}\",\n        \"stageID\": \"{{initStageID}}\",\n        \"responded\": false,\n        \"pendingApproval\": false,\n        \"comment\": \"sample\",\n        \"reporterName\": \"Postman Automation\",\n        \"level\": \"Tenant\",\n        \"tags\": [],\n        \"userDefined\": {\n            \"sentiment\": \"Positive\"\n        }\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "SaveEscalation",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1c9c7827-6644-453e-b194-537fd3eed1a8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify and Set Escalation ID\", function () {",
                              "    var jsonData = pm.response.json(); ",
                              "    pm.globals.set(\"overdueEscalationID\", jsonData.escalation.id);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "3c7d0408-6164-45f0-bb6e-86eeba49726d",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"escalation\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"OverDue by 1Hour\",\n        \"dueIn\": -1\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveEscalation}}",
                        "description": "Create an escalation due in 1 Hour"
                      },
                      "response": []
                    },
                    {
                      "name": "Save Automation Rule",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "8b53ad32-ae03-44e5-97d3-de4891077aa8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Lambda IDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('escalationLambdaID',jsonData.lambdat.id); ",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "1b46ca19-d27d-45ed-899e-5172cf388c45",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "d912e048-4f71-4725-9e5e-df1d8e887827",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "authority",
                            "value": "app.qa.reputation.com"
                          },
                          {
                            "key": "sec-ch-ua",
                            "value": "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"98\", \"Google Chrome\";v=\"98\""
                          },
                          {
                            "key": "accept",
                            "value": "application/json, text/plain, */*"
                          },
                          {
                            "key": "locale",
                            "value": "en_US"
                          },
                          {
                            "key": "sec-ch-ua-mobile",
                            "value": "?0"
                          },
                          {
                            "key": "content-type",
                            "value": "application/json;charset=UTF-8"
                          },
                          {
                            "key": "user-agent",
                            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.109 Safari/537.36"
                          },
                          {
                            "key": "sec-ch-ua-platform",
                            "value": "\"macOS\""
                          },
                          {
                            "key": "origin",
                            "value": "https://app.qa.reputation.com"
                          },
                          {
                            "key": "sec-fetch-site",
                            "value": "same-origin"
                          },
                          {
                            "key": "sec-fetch-mode",
                            "value": "cors"
                          },
                          {
                            "key": "sec-fetch-dest",
                            "value": "empty"
                          },
                          {
                            "key": "referer",
                            "value": "https://app.qa.reputation.com/admin/agencies/1/tenants/216438/automation/add"
                          },
                          {
                            "key": "accept-language",
                            "value": "en-GB,en-US;q=0.9,en;q=0.8"
                          },
                          {
                            "key": "cookie",
                            "value": "liveagent_oref=; liveagent_sid=c3024195-3193-4367-b296-61f984c17416; liveagent_vc=2; liveagent_ptid=c3024195-3193-4367-b296-61f984c17416; utag_qp_historic=utm_source:$utm_medium:$utm_campaign:$utm_content:$utm_term:$gclid:$msclkid:$fbclid:; optimizelyEndUserId=oeu1646967598493r0.413080464204977; _ga=GA1.2.440298482.1646967600; _gcl_au=1.1.2094668691.1646967600; __qca=P0-1974784897-1646967599115; _hjSessionUser_1063923=eyJpZCI6ImQ2ZTM4ZWQ0LTVjNTMtNWU2ZS04NjE2LWY0YzU4NzU1ODRjNiIsImNyZWF0ZWQiOjE2NDY5Njc2MDEzMTgsImV4aXN0aW5nIjp0cnVlfQ==; intercom-id-l7x8v220=f2d4b094-c125-4c74-a61d-7cca8cf12413; amplitude_id_8071ea7a0bcbdb2ca3604824502a50a9reputation.com=eyJkZXZpY2VJZCI6IjU1OTBjNjYzLTE4OWMtNDA4Ny05YTJhLWVhZTZkZDBkZmEwNFIiLCJ1c2VySWQiOiI0NjM1NjkxIiwib3B0T3V0IjpmYWxzZSwic2Vzc2lvbklkIjoxNjQ3MjU5NDQyMDM3LCJsYXN0RXZlbnRUaW1lIjoxNjQ3MjU5NTQzODczLCJldmVudElkIjo0NzYsImlkZW50aWZ5SWQiOjQ3NCwic2VxdWVuY2VOdW1iZXIiOjk1MH0=; intercom-session-l7x8v220=UHFCUnV6cm9aRWs1dEJKbEJLZ0UrQkJidXhXWmo3enEzZlRSR1NtVGRZR0QrdG4vSm90Q0FYb0QyaktGR1AwaS0tZjVtZ1A2cnI0cHVSK3NoaGNCTmUwdz09--02966ea87e8976404f2f6e9b6d29bce46c7a26b3; utag_main=v_id:017f76eb2c77001f61ef1490a1a505079001f07100b7e$_sn:2$_se:1$_ss:1$_st:1647261774901$dc_visit:2$ses_id:1647259974901%3Bexp-session$_pn:1%3Bexp-session$dc_event:1%3Bexp-session$dc_region:ap-east-1%3Bexp-session; connect.sid=s%3AyuhVbMm11Aa7ULNhe85SApfNxisju9II.EcdOHwiIzxr0Nw4rksQOq%2FRhtXXFKPsD%2F6ulyyqsIa8; rm=s%3A21d200968e22a1a84454c51ed423386ff27a1329529643f5d65860c1ef71d80ca4d673c57d4ae70f16c1b3345ae61f87d0d141e69e0cd39990241a37c0210eea080192a33abcb829218d49541fab446b88b7c163d869157b46383448ae45db42a9280b499a7009060d5b45d1e9a6b8b04bd97d4199f70f257f4133ddf6d6d3fbef4b03dc5cd84f19626ec93b159fdbfa9ac64fa79b87d3059280e75282186f76b2aa60e5ec72dc98ff8a539ae9ee23651541aa7d73728c5e149628b7778714393ecda65b78fb7b20e3a5a8d2cabcf83d56e4e146b7c0d5c7d7304e77d21b008fe4374f6c47df7dc2108d02942b5a7c.CbfOQGaiK0vRbioIAOnTulze89e82ft667%2Bd3EYvlcQ; intercom-session-tl7nkdko=ZkpoTkpmS083Q3BCZFIwU3Q5aFJ2aFRTdThyV3VOek1JeWdSV3VJa3ZjcFdzekNrNDVpcWdyWFI2TmxIMjVKQS0tNmt4d1FQMDcvYm1ienlYMGMvallBdz09--ce97d5a7502ae49f74f1c05a1b5e13955ea22dd7; amplitude_id_3ef2d9c5d1043968aeb9e2bb0c7b35cereputation.com=eyJkZXZpY2VJZCI6ImRmYzFkOTg0LWE5NjctNDc2ZS05NmQ5LTYyODExYzMyNzg3YlIiLCJ1c2VySWQiOiI1MjAxMzE1Iiwib3B0T3V0IjpmYWxzZSwic2Vzc2lvbklkIjoxNjQ3NDEwOTU4ODI3LCJsYXN0RXZlbnRUaW1lIjoxNjQ3NDEyODA5NjYwLCJldmVudElkIjoxMDMsImlkZW50aWZ5SWQiOjEwMywic2VxdWVuY2VOdW1iZXIiOjIwNn0="
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n     \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"lambda\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"eventType\": 6,\n        \"name\": \"Rule for OverDue by 1hr \",\n        \"condition\": {\n            \"criterias\": [\n                {\n                    \"name\": \"escalation\",\n                    \"values\": [\n                        \"{{overdueEscalationID}}\"\n                    ],\n                    \"operator\": 4,\n                    \"logical\": 1\n                }\n            ]\n        },\n        \"actions\": [\n            {\n                \"type\": \"updateTicket\",\n                \"parameters\": {\n                    \"__queueID__\": {{overdueQueueID}},\n                    \"__stageID__\": {{initStageID}},\n                    \"__sla__\": \"24\"\n                }\n            }\n        ],\n        \"enabled\": true\n    }\n}"
                        },
                        "url": "http://{{r4e-lambda}}/{{saveLambda}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "6395bb31-f5f2-4029-a587-483107e34449"
                },
                {
                  "name": "Tests",
                  "item": [
                    {
                      "name": "RBENT-72628",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "8709394f-2b92-4c17-a95c-9ecf8b93e9db",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify Queue ID\", function () {",
                              "    ",
                              "    var jsonData = pm.response.json(); ",
                              "    pm.expect(jsonData.ticket.queueID).to.eq(pm.globals.get('overdueQueueID')); ",
                              "    ",
                              "})",
                              " ",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "43d652b6-88ab-4564-b06e-967c4b2df301",
                            "exec": [
                              "setTimeout(function(){}, [180000]);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "43f8190b-ed6f-45fb-879c-69b0f017a47a",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{escalationTicketID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{getTicket}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "6d40be14-59ae-443a-9888-328bccc906fa"
                },
                {
                  "name": "TearDown",
                  "item": [
                    {
                      "name": "removeTicket",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c7045fc7-cb88-4491-a52b-79eb94f73421",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "0fbcd042-b357-4640-a9df-8d5fe4d95b81",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{escalationTicketID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeStage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "0c98a341-2e8d-4b27-bff7-ef007c65def2",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "5b670c2c-8ab2-41a5-9fd8-8cf1bbe42c93",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"stageID\": \"{{initStageID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeQueue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c32cf087-a4f4-4fce-afc6-3660a4668a1d",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "0dad84f7-124a-4762-a1db-7d7a93b370a4",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"queueID\": \"{{qID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeQueue}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeQueue -Overdue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c32cf087-a4f4-4fce-afc6-3660a4668a1d",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "709c2557-aca8-4628-889b-c5f9e28b5605",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"queueID\": \"{{overdueQueueID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeQueue}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Remove Automation rule",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "853c3341-63f0-4fc8-8abc-580b1fda49d8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "60464ad0-7084-4e15-b01a-622e409b7d59",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"lambdaID\": \"{{escalationLambdaID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-lambda}}/{{removeLambdaByID}}",
                        "description": "RBENT-75009\n\n*   Remove Lambda rule created for surveys."
                      },
                      "response": []
                    },
                    {
                      "name": "RemoveEscalation",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1c9c7827-6644-453e-b194-537fd3eed1a8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Remove Escalation\", function () {",
                              "    var jsonData = pm.response.json(); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "7d6443cc-d905-4c3a-9023-82f75227a855",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"escalationID\":\"{{overdueEscalationID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeEscalation}}",
                        "description": "Create an escalation due in 1 Hour"
                      },
                      "response": []
                    }
                  ],
                  "id": "83d3234e-d167-464b-9140-b99bc1651056"
                }
              ],
              "id": "7007aa81-2920-47e7-9a09-4ab6c4fafd0d",
              "description": "RBENT-72628\n\nVerify that when a ticket is overdue by an hour then automation rules are triggering and ticket is getting updated"
            },
            {
              "name": "Verify GetTickets API",
              "item": [
                {
                  "name": "Setup",
                  "item": [
                    {
                      "name": "Get Tenant API Key",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1c9c7827-6644-453e-b194-537fd3eed1a8",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Verify and Set API Key\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log('apiKey = '+jsonData.apiKey);",
                              "    pm.globals.set(\"apiKey\", jsonData.apiKey);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "d523a51a-1814-486f-a859-764cb7ee6c58",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"tenantID\": {{ActionsTenantID}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-admin}}/{{getTenantApiKey}}"
                      },
                      "response": []
                    },
                    {
                      "name": "searchRoles",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "dac590b2-fcbc-4c35-bcff-075eb80e1a65",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "ab0747cd-5e8c-4c16-b6b9-0c1f8a91b6c0",
                            "exec": [
                              "pm.test(\"Verify Success code\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.response.responseCode).to.eql(\"Success\");",
                              "});",
                              "",
                              "pm.test(\"Capture roleIDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(jsonData);",
                              "    var rolesLength = jsonData.roles.length;",
                              "    pm.expect(rolesLength).to.above(0);",
                              "    for(let i = 0; i < rolesLength; i++) {",
                              "        if(jsonData.roles[i].name.toLowerCase() == 'admin') {",
                              "            pm.globals.set('rID', jsonData.roles[i].id);",
                              "            break;",
                              "        }",
                              "    }",
                              "    console.log('Captured Role ID = '+pm.globals.get('rID')); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "ff1724d3-80cc-41ad-85e8-06e77a06f6d3",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"searchRequest\": {\n        \"filters\": []\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-admin}}/{{searchRoles}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveStage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "a481cff4-d38b-437b-abc5-a39e5268d7e5",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture stageID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('sID', jsonData.stage.id);",
                              "    console.log('Captured Stage ID = '+pm.globals.get('sID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "7a0819cb-b67f-4714-9f14-9a514966678c",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"stage\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Stage One\",\n        \"system\": false,\n        \"order\": 10,\n        \"onHold\": false\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveQueue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "b6a7c409-1a56-470f-acb5-d06a556570c7",
                            "exec": [
                              "pm.test(\"Verify Status Code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture queueID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('qID', jsonData.queue.id);",
                              "    console.log('Captured Queue ID = '+pm.globals.get('qID'));",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "20bafbe7-1930-4306-a9a6-5d619484fbf2",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"queue\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"name\": \"Test Queue\",\n        \"roleIDs\": [\n            \"{{rID}}\"\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveQueue}}"
                      },
                      "response": []
                    },
                    {
                      "name": "getLocationByCode",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "624c43de-60ac-4676-b5c0-a04a27402ec5",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Location IDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('lId',jsonData.location.id);",
                              "    pm.globals.set('lUId',jsonData.location.uid);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "a1014ff9-7bb1-47b6-8a60-8e32060c5b17",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "7b7cf1d7-1c5d-49dd-999a-588abdb38687",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"locationCode\": \"{{TenantActionsLocationOneCode}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-location-backend}}/{{getLocationByCode}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveTicket -createdDate - Yesterday",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f56b6656-13ca-4fd5-9018-adaaf8df5271",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket ID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('testTicketID1', jsonData.ticket.id)",
                              "})",
                              "",
                              "pm.test(\"Console Comment\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(jsonData.ticket.comment);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "27646e42-5972-4c43-b1dd-6c980fa64e44",
                            "exec": [
                              "var yesterdayDate=new Date().setDate(new Date().getDate() - 1);",
                              "pm.globals.set(\"yesterdayDate\",yesterdayDate.valueOf());",
                              "",
                              "var todayDate=new Date().setDate(new Date().getDate());",
                              "pm.globals.set(\"todayDate\",todayDate.valueOf());",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "bc847a93-9c18-4652-be44-0878b4aae0b7",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"ticket\": {\n        \"locationID\": \"{{lId}}\",\n        \"dueDate\": \"{{dueDate}}\",\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"locationUid\": {{lUId}},\n        \"ticketType\": \"UserDefined\",\n        \"queueID\": \"{{qID}}\",\n        \"stageID\": \"{{sID}}\",\n        \"responded\": false,\n        \"pendingApproval\": false,\n        \"comment\": \"Sample Ticket 1\",\n        \"createdDate\":{{yesterdayDate}},\n        \"updatedDate\":{{yesterdayDate}},\n        \"reporterName\": \"Postman Automation\",\n        \"level\": \"Tenant\",\n        \"tags\": [],\n        \"userDefined\": {\n            \"sentiment\": \"Positive\"\n        }\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveTicket}}",
                        "description": "```\ncreating a Ticket with createdDate - Yesterday\n```"
                      },
                      "response": []
                    },
                    {
                      "name": "saveTicket -UpdatedDate - Today",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f56b6656-13ca-4fd5-9018-adaaf8df5271",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket ID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('testTicketID2', jsonData.ticket.id)",
                              "})",
                              "",
                              "pm.test(\"Console Comment\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(jsonData.ticket.comment);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "27646e42-5972-4c43-b1dd-6c980fa64e44",
                            "exec": [
                              "var yesterdayDate=new Date().setDate(new Date().getDate() - 1);",
                              "pm.globals.set(\"yesterdayDate\",yesterdayDate.valueOf());",
                              "",
                              "var todayDate=new Date().setDate(new Date().getDate());",
                              "pm.globals.set(\"todayDate\",todayDate.valueOf());",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "e7dfe148-198b-403a-bb5a-ad7bab1aee9d",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"ticket\": {\n        \"locationID\": \"{{lId}}\",\n        \"dueDate\": \"{{dueDate}}\",\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"locationUid\": {{lUId}},\n        \"ticketType\": \"UserDefined\",\n        \"queueID\": \"{{qID}}\",\n        \"stageID\": \"{{sID}}\",\n        \"responded\": false,\n        \"pendingApproval\": false,\n        \"comment\": \"Sample Ticket 2\",\n        \"createdDate\":{{yesterdayDate}},\n        \"updatedDate\":{{todayDate}},\n        \"reporterName\": \"Postman Automation\",\n        \"level\": \"Tenant\",\n        \"tags\": [],\n        \"userDefined\": {\n            \"sentiment\": \"Positive\"\n        }\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveTicket}}",
                        "description": "```\ncreating a Ticket with UpdatedDate - Today\n```"
                      },
                      "response": []
                    },
                    {
                      "name": "saveTicket -created and Update Today 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f56b6656-13ca-4fd5-9018-adaaf8df5271",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket ID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('testTicketID3', jsonData.ticket.id)",
                              "})",
                              "",
                              "pm.test(\"Console Comment\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(jsonData.ticket.comment);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "27646e42-5972-4c43-b1dd-6c980fa64e44",
                            "exec": [
                              "var yesterdayDate=new Date().setDate(new Date().getDate() - 1);",
                              "pm.globals.set(\"yesterdayDate\",yesterdayDate.valueOf());",
                              "",
                              "var todayDate=new Date().setDate(new Date().getDate());",
                              "pm.globals.set(\"todayDate\",todayDate.valueOf());",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "5687679e-0edb-4afa-b553-5a39b94331d3",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"ticket\": {\n        \"locationID\": \"{{lId}}\",\n        \"dueDate\": \"{{dueDate}}\",\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"locationUid\": {{lUId}},\n        \"ticketType\": \"UserDefined\",\n        \"queueID\": \"{{qID}}\",\n        \"stageID\": \"{{sID}}\",\n        \"responded\": false,\n        \"pendingApproval\": false,\n        \"comment\": \"Sample Ticket 3\",\n        \"createdDate\":{{todayDate}},\n        \"updatedDate\":{{todayDate}},\n        \"reporterName\": \"Postman Automation\",\n        \"level\": \"Tenant\",\n        \"tags\": [],\n        \"userDefined\": {\n            \"sentiment\": \"Positive\"\n        }\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveTicket}}",
                        "description": "```\ncreating a Ticket with createdDate & UpdatedDate - Today\n```"
                      },
                      "response": []
                    },
                    {
                      "name": "saveTicket -created and Update Today 2",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f56b6656-13ca-4fd5-9018-adaaf8df5271",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket ID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('testTicketID4', jsonData.ticket.id)",
                              "})",
                              "",
                              "pm.test(\"Console Comment\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    console.log(jsonData.ticket.comment);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "27646e42-5972-4c43-b1dd-6c980fa64e44",
                            "exec": [
                              "var yesterdayDate=new Date().setDate(new Date().getDate() - 1);",
                              "pm.globals.set(\"yesterdayDate\",yesterdayDate.valueOf());",
                              "",
                              "var todayDate=new Date().setDate(new Date().getDate());",
                              "pm.globals.set(\"todayDate\",todayDate.valueOf());",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "1366bb79-b6a3-4973-b87f-8bd661ca4407",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"ticket\": {\n        \"locationID\": \"{{lId}}\",\n        \"dueDate\": \"{{dueDate}}\",\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"locationUid\": {{lUId}},\n        \"ticketType\": \"UserDefined\",\n        \"queueID\": \"{{qID}}\",\n        \"stageID\": \"{{sID}}\",\n        \"responded\": false,\n        \"pendingApproval\": false,\n        \"comment\": \"Sample Ticket 4\",\n        \"createdDate\":{{todayDate}},\n        \"updatedDate\":{{todayDate}},\n        \"reporterName\": \"Postman Automation\",\n        \"level\": \"Tenant\",\n        \"tags\": [],\n        \"userDefined\": {\n            \"sentiment\": \"Positive\"\n        }\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveTicket}}",
                        "description": "```\ncreating a Ticket with createdDate & UpdatedDate - Today\n```"
                      },
                      "response": []
                    }
                  ],
                  "id": "ade09231-bfbb-454b-bde9-7c1624a3f846"
                },
                {
                  "name": "Tests",
                  "item": [
                    {
                      "name": "RBENT-75134- Test 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1134ff4c-99de-46ea-97be-d9782a9fc3b3",
                            "exec": [
                              "pm.test(\"When I Test for Created Date as Yerterday in get tickets api\", function () {  ",
                              "    var jsonData = pm.response.json();",
                              "    pm.response.to.have.status(200);",
                              "    pm.expect(jsonData.tickets.length).to.equals(2);",
                              "    var ticketArr=JSON.stringify(jsonData.tickets);",
                              "   pm.expect(ticketArr.includes(pm.globals.get(\"testTicketID1\"))).to.eq(true);",
                              "   pm.expect(ticketArr.includes(pm.globals.get(\"testTicketID2\"))).to.eq(true);",
                              "   pm.expect(ticketArr.includes(pm.globals.get(\"testTicketID3\"))).to.eq(false);",
                              "   pm.expect(ticketArr.includes(pm.globals.get(\"testTicketID4\"))).to.eq(false);",
                              "    ",
                              "});",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "eb13dab7-5a26-4a02-aba3-570f10b4dd2a",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "d0a75a88-76ce-4955-aef6-4532f0e711d3",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "X-API-KEY",
                            "value": "{{apiKey}}",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "raw": "https://{{apiHost}}/{{v3_tickets}}?range=Yesterday&rangeFor=createdDate",
                          "protocol": "https",
                          "host": [
                            "{{apiHost}}"
                          ],
                          "path": [
                            "{{v3_tickets}}"
                          ],
                          "query": [
                            {
                              "key": "range",
                              "value": "Yesterday"
                            },
                            {
                              "key": "rangeFor",
                              "value": "createdDate"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "RBENT-75134- Test 2",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1134ff4c-99de-46ea-97be-d9782a9fc3b3",
                            "exec": [
                              "pm.test(\"When I Test for Updated Date as today in get tickets api\", function () {  ",
                              "    var jsonData = pm.response.json();",
                              "    pm.response.to.have.status(200);",
                              "    pm.expect(jsonData.tickets.length).to.equals(4);",
                              "    var ticketArr=JSON.stringify(jsonData.tickets);",
                              "   pm.expect(ticketArr.includes(pm.globals.get(\"testTicketID1\"))).to.eq(true);",
                              "   pm.expect(ticketArr.includes(pm.globals.get(\"testTicketID2\"))).to.eq(true);",
                              "   pm.expect(ticketArr.includes(pm.globals.get(\"testTicketID3\"))).to.eq(true);",
                              "   pm.expect(ticketArr.includes(pm.globals.get(\"testTicketID4\"))).to.eq(true);",
                              "    ",
                              "});",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "eb13dab7-5a26-4a02-aba3-570f10b4dd2a",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "92381308-f6e8-4565-bb78-7f845bb0a792",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "X-API-KEY",
                            "value": "{{apiKey}}",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "raw": "https://{{apiHost}}/{{v3_tickets}}?range=Today&rangeFor=updatedDate",
                          "protocol": "https",
                          "host": [
                            "{{apiHost}}"
                          ],
                          "path": [
                            "{{v3_tickets}}"
                          ],
                          "query": [
                            {
                              "key": "range",
                              "value": "Today"
                            },
                            {
                              "key": "rangeFor",
                              "value": "updatedDate"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "id": "03f64b6e-b352-44f8-a58b-6d0897ba7631"
                },
                {
                  "name": "TearDown",
                  "item": [
                    {
                      "name": "removeTicket 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c7045fc7-cb88-4491-a52b-79eb94f73421",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "f0012a18-1b9d-493e-baca-2872869e3ddd",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{testTicketID1}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeTicket 2",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c7045fc7-cb88-4491-a52b-79eb94f73421",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "5d6c6d68-0d0b-49db-bee5-9eb388fbe032",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{testTicketID2}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeTicket 3",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c7045fc7-cb88-4491-a52b-79eb94f73421",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "199eb1e8-267a-45ce-82de-5a85286c9044",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{testTicketID3}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeTicket 4",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c7045fc7-cb88-4491-a52b-79eb94f73421",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "0d0ca29d-0b3d-4e15-a702-52809ff6933b",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{testTicketID4}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeStage",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript",
                            "id": "0c98a341-2e8d-4b27-bff7-ef007c65def2"
                          }
                        }
                      ],
                      "id": "79804a4f-6754-4588-b532-d64f58a5212d",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"stageID\": \"{{sID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeStage}}"
                      },
                      "response": []
                    },
                    {
                      "name": "removeQueue",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript",
                            "id": "c32cf087-a4f4-4fce-afc6-3660a4668a1d"
                          }
                        }
                      ],
                      "id": "fe61e8b1-4edf-41c5-8908-70207c9908f9",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"queueID\": \"{{qID}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeQueue}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "a59e4232-c2ba-4bc1-9cb0-dd762a8e8c42"
                }
              ],
              "id": "d717949d-e55f-4f38-8c0e-c26b2c057d52",
              "description": "RBENT-75547 -\n\nUse case for testing new parameters rangefor added in getTickets api and validate now erorr is shown on max limits"
            }
          ],
          "id": "19a26827-e5fe-48c9-9775-5acf1fefbe50"
        },
        {
          "name": "internal-apis",
          "item": [
            {
              "name": "Verify Post Code Label for en_GB locale",
              "item": [
                {
                  "name": "getTemplate en_GB",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9b7d8a2d-b332-4fd2-b378-699e444d4b48",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Verify Post Code Label\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    for(let i = 0; i < jsonData.fields[2].length; i++) {",
                          "        let val = jsonData.fields[2][i];",
                          "        if(val.name == 'postalCode') {",
                          "            pm.expect(val.label).to.eql(\"Post Code\");",
                          "            break;",
                          "        }",
                          "    }",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "91a4d5f6-3494-4299-b8c4-202e6f5737dc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "locale",
                        "value": "en_GB",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "https://{{appHost}}/{{addressTemplate}}?country=US",
                      "protocol": "https",
                      "host": [
                        "{{appHost}}"
                      ],
                      "path": [
                        "{{addressTemplate}}"
                      ],
                      "query": [
                        {
                          "key": "country",
                          "value": "US"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "getTemplate en_US",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "d81b0dd1-8a7e-4838-bb74-afcc12eca1ed",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Verify ZIP Label\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    for(let i = 0; i < jsonData.fields[2].length; i++) {",
                          "        let val = jsonData.fields[2][i];",
                          "        if(val.name == 'postalCode') {",
                          "            pm.expect(val.label).to.eql(\"ZIP\");",
                          "            break;",
                          "        }",
                          "    }",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "faa2942a-80b3-4b59-bc5d-9acb11e87202",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "locale",
                        "value": "en_US",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "https://{{appHost}}/{{addressTemplate}}?country=US",
                      "protocol": "https",
                      "host": [
                        "{{appHost}}"
                      ],
                      "path": [
                        "{{addressTemplate}}"
                      ],
                      "query": [
                        {
                          "key": "country",
                          "value": "US"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "id": "add0e54b-f6f3-4284-9152-d72b7daf8746",
              "description": "RBENT-74695:\n\nVerify \"Post Code\" label for en_GB locale"
            },
            {
              "name": "Verify Add,Edit,Delete.tagging Notes",
              "item": [
                {
                  "name": "Setup",
                  "item": [
                    {
                      "name": "searchStages",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f0c6324f-d80f-4174-af3b-215fc1f4e34d",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Open Stage ID\", function() {",
                              "    let jsonData = pm.response.json();",
                              "    pm.globals.set(\"OpenStageId\",jsonData.stages[0].id);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "fbf0269c-a934-42f1-9b7a-e5a556cc31ea",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"searchRequest\": {\n        \"filters\": [\n            {\n                \"name\": \"__ticket_stage_name__\",\n                \"values\": [\n                    \"{{OpenStage}}\"\n                ]\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{searchStages}}"
                      },
                      "response": []
                    },
                    {
                      "name": "searchQueues",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "59528088-d3a8-49fd-8933-a95f50b22c7d",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Main Queue ID\", function() {",
                              "    let jsonData = pm.response.json();",
                              "    pm.globals.set(\"MainQueueId\",jsonData.queues[0].id);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "7993a570-110e-43c8-95e0-8f9f851837f4",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"requestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"searchRequest\": {\n        \"filters\": [\n            {\n                \"name\": \"__ticket_queue_name__\",\n                \"values\": [\n                    \"{{MainQueue}}\"\n                ]\n            }\n        ]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{searchQueues}}"
                      },
                      "response": []
                    },
                    {
                      "name": "getLocationByCode",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "cbd0deda-6eb5-400c-89c9-63a1425d49e1",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Location IDs\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('lId',jsonData.location.id);",
                              "    pm.globals.set('lUId',jsonData.location.uid);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "1e8d7391-f0ec-4bc1-84bd-c31eb431d218",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "fa4554a5-0199-4ac7-bedd-6d2dbcaa33e3",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"locationCode\": \"{{TenantActionsLocationOneCode}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-location-backend}}/{{getLocationByCode}}"
                      },
                      "response": []
                    },
                    {
                      "name": "saveTicket",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "76d71388-a863-40d7-a9a3-b21def92e9a7",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Ticket ID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('notesTicketId', jsonData.ticket.id)",
                              "})",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "807db91b-5a8d-4c19-bfb9-326971b9e2f5",
                            "exec": [
                              "var date = Date.now();",
                              "pm.globals.set('dueDate', date);",
                              "pm.globals.set('comment', \"Postman Request added at \" + date);",
                              "console.log(pm.globals.get('comment'))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "65d374b9-f56f-4768-a229-33a1830819c1",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"ticket\": {\n        \"locationID\": \"{{lId}}\",\n        \"dueDate\": \"{{dueDate}}\",\n        \"tenantID\": {{ActionsTenantID}},\n        \"agencyID\": {{ActionsAgencyID}},\n        \"locationUid\": {{lUId}},\n        \"ticketType\": \"UserDefined\",\n        \"queueID\": \"{{MainQueueId}}\",\n        \"stageID\": \"{{OpenStageId}}\",\n        \"responded\": false,\n        \"pendingApproval\": false,\n        \"comment\": \"{{comment}}\",\n        \"reporterName\": \"Postman Automation\",\n        \"level\": \"Tenant\",\n        \"tags\": [],\n        \"userDefined\": {\n            \"sentiment\": \"Positive\"\n        }\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{saveTicket}}"
                      },
                      "response": []
                    },
                    {
                      "name": "getTenantUserByEmail",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "205306d2-c256-40fb-aa4a-2b43b4f042d5",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Get User ID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    var users = jsonData.users;",
                              "    for(let i = 0; i < users.length; i++) {",
                              "        if(users[i].email == pm.environment.get('tenantuser1') && users[i].tenantID == pm.environment.get('ActionsTenantID')){",
                              "            pm.globals.set('tenantUserId', users[i].id);",
                              "            pm.globals.set('tenantUserDisplayName', users[i].displayName);",
                              "            break;",
                              "        }",
                              "    }",
                              "    console.log(pm.globals.get('tenantUserId'))",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "3199f9d2-c33e-4f02-aa6e-c976c413681d",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"GetUsersByEmailRequest\": {\n        \"email\": \"{{tenantuser1}}\"\n    }\n}"
                        },
                        "url": "http://{{r4e-user}}/{{getUsersByEmail}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "339d3a4f-9a61-4778-ba22-91266b915bd2"
                },
                {
                  "name": "Tests",
                  "item": [
                    {
                      "name": "addNotes",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1a0e264f-8fab-403c-83df-62dbda363bc3",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Notes ID\", function() {",
                              "    pm.globals.set('notesId', jsonData.id);",
                              "})",
                              "",
                              "pm.test(\"Verify Response\", function() {",
                              "    pm.expect(jsonData.createdBy).to.equals(pm.globals.get('tenantUserId'));",
                              "    pm.expect(jsonData.updatedBy).to.equals(pm.globals.get('tenantUserId'));",
                              "    pm.expect(jsonData.locationUid).to.equals(pm.globals.get('lUId'));",
                              "    pm.expect(jsonData.objectID).to.equals(pm.globals.get('notesTicketId').toString());",
                              "    pm.expect(jsonData.comment).to.equals(pm.globals.get('notesComment'));",
                              "",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "0d802c6e-193a-42aa-bda7-2a9db0901f47",
                            "exec": [
                              "var date = Date.now();",
                              "pm.globals.set('notesComment','Notes added at '+date)",
                              "pm.globals.set('notesHTML', '<p>'+pm.globals.get('notesComment')+'</p>');"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "b35d9629-66af-46df-98e5-0ab501dd12aa",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"agencyId\": \"{{ActionsAgencyID}}\",\n    \"tenantId\": \"{{ActionsTenantID}}\",\n    \"ticketNote\": {\n        \"createdBy\": {{tenantUserId}},\n        \"internal\": false,\n        \"objectID\": \"{{notesTicketId}}\",\n        \"comment\": \"{{notesComment}}\",\n        \"commentHTML\": \"{{notesHTML}}\",\n        \"taggedUserIDs\": [],\n        \"agencyId\": \"{{ActionsAgencyID}}\",\n        \"locationUid\": {{lUId}}\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "http://{{r4e-api-internal}}/api/tenants/{{ActionsTenantID}}/{{notes}}?agencyId={{ActionsAgencyID}}&userId={{tenantUserId}}",
                          "protocol": "http",
                          "host": [
                            "{{r4e-api-internal}}"
                          ],
                          "path": [
                            "api",
                            "tenants",
                            "{{ActionsTenantID}}",
                            "{{notes}}"
                          ],
                          "query": [
                            {
                              "key": "agencyId",
                              "value": "{{ActionsAgencyID}}"
                            },
                            {
                              "key": "userId",
                              "value": "{{tenantUserId}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "updateNotes",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "5b3b4d18-37a3-4777-8897-11315a35ffb8",
                            "exec": [
                              "var jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Notes ID\", function() {",
                              "    pm.globals.set('notesId', jsonData.id);",
                              "})",
                              "",
                              "pm.test(\"Verify Response\", function() {",
                              "    pm.expect(jsonData.createdBy).to.equals(pm.globals.get('tenantUserId'));",
                              "    pm.expect(jsonData.updatedBy).to.equals(pm.globals.get('tenantUserId'));",
                              "    pm.expect(jsonData.locationUid).to.equals(pm.globals.get('lUId'));",
                              "    pm.expect(jsonData.objectID).to.equals(pm.globals.get('notesTicketId').toString());",
                              "    let cExp = pm.globals.get('notesComment').replace(/\\\\\\\\n/g, '\\\\n')",
                              "    let cAct = jsonData.comment.replace(/\\n/g, '\\\\n')",
                              "    pm.expect(cAct).to.equals(cExp);",
                              "    pm.expect(jsonData.taggedUserIDs).to.includes(pm.globals.get('tenantUserId'))",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "54cff47c-4bcd-4e91-ae3c-64ec4f103f32",
                            "exec": [
                              "pm.globals.set(\"notesHTML\", \"<p>\"+pm.globals.get(\"notesComment\")+\"</p><p><span class='ql-mention' data-id='\"+pm.globals.get(\"tenantUserId\")+\"'><span contenteditable='false'>@\"+pm.globals.get(\"tenantUserDisplayName\")+\"</span></span></p>\");",
                              "pm.globals.set('notesComment', pm.globals.get('notesComment')+`\\\\n@`+pm.globals.get(\"tenantUserDisplayName\"));"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "c425abcf-2b5a-44ca-862f-5deef60a8a6a",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"agencyId\": \"{{ActionsAgencyID}}\",\n    \"tenantId\": \"{{ActionsTenantID}}\",\n    \"ticketNote\": {\n        \"id\": \"{{notesId}}\",\n        \"createdBy\": {{tenantUserId}},\n        \"internal\": false,\n        \"objectID\": \"{{notesTicketId}}\",\n        \"comment\": \"{{notesComment}}\",\n        \"commentHTML\": \"{{notesHTML}}\",\n        \"taggedUserIDs\": [{{tenantUserId}}],\n        \"agencyId\": \"{{ActionsAgencyID}}\",\n        \"locationUid\": {{lUId}}\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "http://{{r4e-api-internal}}/api/tenants/{{ActionsTenantID}}/{{notes}}?agencyId={{ActionsAgencyID}}&userId={{tenantUserId}}",
                          "protocol": "http",
                          "host": [
                            "{{r4e-api-internal}}"
                          ],
                          "path": [
                            "api",
                            "tenants",
                            "{{ActionsTenantID}}",
                            "{{notes}}"
                          ],
                          "query": [
                            {
                              "key": "agencyId",
                              "value": "{{ActionsAgencyID}}"
                            },
                            {
                              "key": "userId",
                              "value": "{{tenantUserId}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "deleteNotes",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "e2e7328e-956e-494a-b76b-1317b20067bf",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "ee4bf374-1e79-4ecc-bb1f-0375672410e3",
                            "exec": [
                              "pm.globals.set(\"notesHTML\", \"<p>\"+pm.globals.get(\"notesComment\")+\" <span class='ql-mention' data-id='\"+pm.globals.get(\"tenantUserId\")+\"'><span contenteditable='false'>@\"+pm.globals.get(\"tenantUserDisplayName\")+\"</span></span></p>\");"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "0c21919d-3f28-4fed-a2ef-a0d780ef42bf",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "http://{{r4e-api-internal}}/api/tenants/{{ActionsTenantID}}/{{notes}}/{{notesId}}?agencyId={{ActionsAgencyID}}&userId={{tenantUserId}}",
                          "protocol": "http",
                          "host": [
                            "{{r4e-api-internal}}"
                          ],
                          "path": [
                            "api",
                            "tenants",
                            "{{ActionsTenantID}}",
                            "{{notes}}",
                            "{{notesId}}"
                          ],
                          "query": [
                            {
                              "key": "agencyId",
                              "value": "{{ActionsAgencyID}}"
                            },
                            {
                              "key": "userId",
                              "value": "{{tenantUserId}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "id": "c915d37e-71cb-452f-ab8f-64fab1998083"
                },
                {
                  "name": "TearDown",
                  "item": [
                    {
                      "name": "removeTicket",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "65b75e9a-b741-4f78-9c93-b14f5ae29adc",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "bf2188c6-4464-4d93-b94d-0680ffef3745",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"tenantID\": {{ActionsTenantID}}\n    },\n    \"ticketID\": {{notesTicketId}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "http://{{r4e-actions}}/{{removeTicket}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "631e9092-7335-40ac-81d2-de0488194252"
                }
              ],
              "id": "11bb7984-7bea-4f2f-997d-2d2bad210209",
              "description": "RBENT-76604: API Automation: Notes: Add, Edit, Delete, Tagging Users, Notification alerts to tagged users"
            },
            {
              "name": "Verify Ticket Types, Field Groups, Fields",
              "item": [
                {
                  "name": "Setup",
                  "item": [
                    {
                      "name": "getAgencyUserByEmail",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "f0f349b9-854b-4b3f-820f-cd2b87967384",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Get User ID\", function () {",
                              "    var jsonData = pm.response.json();",
                              "    var users = jsonData.users;",
                              "    for(let i = 0; i < users.length; i++) {",
                              "        if(users[i].email == pm.environment.get('agencyuser') && users[i].agencyID == pm.environment.get('ActionsAgencyID')){",
                              "            pm.globals.set('agencyUserId', users[i].id);",
                              "            break;",
                              "        }",
                              "    }",
                              "    console.log(pm.globals.get('agencyUserId'))",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "c4d2fc99-0967-42e3-a682-e1105b2b5bec",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"RequestHeader\": {\n        \"agencyID\": {{ActionsAgencyID}}\n    },\n    \"GetUsersByEmailRequest\": {\n        \"email\": \"{{agencyuser}}\"\n    }\n}"
                        },
                        "url": "http://{{r4e-user}}/{{getUsersByEmail}}"
                      },
                      "response": []
                    }
                  ],
                  "id": "e723ca4b-a7f4-4707-8f58-2fb9b9ed9cee"
                },
                {
                  "name": "Tests",
                  "item": [
                    {
                      "name": "saveFields",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "39dfc692-f233-4eae-97ad-b61475f41456",
                            "exec": [
                              "let customFields = pm.globals.get('customFields')",
                              "",
                              "if(!customFields || customFields.length == 0) {",
                              "    customFields = [",
                              "        {",
                              "            \"label\": \"Boolean Checkbox\",",
                              "            \"fieldMetaDataType\": 0,",
                              "            \"fieldMetaDataRenderer\": 1,",
                              "            \"defaultValues\": null,",
                              "            \"multiValue\": false,",
                              "            \"expression\": null,",
                              "            \"mandatory\": true",
                              "        },",
                              "        {",
                              "            \"label\": \"Boolean Radio Button\",",
                              "            \"fieldMetaDataType\": 0,",
                              "            \"fieldMetaDataRenderer\": 4,",
                              "            \"defaultValues\": null,",
                              "            \"multiValue\": false,",
                              "            \"expression\": null,",
                              "            \"mandatory\": false",
                              "        },",
                              "        {",
                              "            \"label\": \"DateTime Date Time\",",
                              "            \"fieldMetaDataType\": 1,",
                              "            \"fieldMetaDataRenderer\": 2,",
                              "            \"defaultValues\": null,",
                              "            \"multiValue\": false,",
                              "            \"expression\": null,",
                              "            \"mandatory\": true",
                              "        },",
                              "        {",
                              "            \"label\": \"Double Default value\",",
                              "            \"fieldMetaDataType\": 2,",
                              "            \"fieldMetaDataRenderer\": 5,",
                              "            \"defaultValues\": [",
                              "                {",
                              "                    \"label\": \"1.5\"",
                              "                }",
                              "            ],",
                              "            \"multiValue\": false,",
                              "            \"expression\": null,",
                              "            \"mandatory\": false",
                              "        },",
                              "        {",
                              "            \"label\": \"Double Text Area\",",
                              "            \"fieldMetaDataType\": 2,",
                              "            \"fieldMetaDataRenderer\": 6,",
                              "            \"defaultValues\": null,",
                              "            \"multiValue\": false,",
                              "            \"expression\": null,",
                              "            \"mandatory\": true",
                              "        },",
                              "        {",
                              "            \"label\": \"Double Text Box\",",
                              "            \"fieldMetaDataType\": 2,",
                              "            \"fieldMetaDataRenderer\": 7,",
                              "            \"defaultValues\": null,",
                              "            \"multiValue\": false,",
                              "            \"expression\": null,",
                              "            \"mandatory\": false",
                              "        },",
                              "        {",
                              "            \"label\": \"Integer Default value\",",
                              "            \"fieldMetaDataType\": 3,",
                              "            \"fieldMetaDataRenderer\": 5,",
                              "            \"defaultValues\": [",
                              "                {",
                              "                    \"label\": \"2\"",
                              "                }",
                              "            ],",
                              "            \"multiValue\": false,",
                              "            \"expression\": null,",
                              "            \"mandatory\": true",
                              "        },",
                              "        {",
                              "            \"label\": \"Integer Text Area\",",
                              "            \"fieldMetaDataType\": 3,",
                              "            \"fieldMetaDataRenderer\": 6,",
                              "            \"defaultValues\": null,",
                              "            \"multiValue\": false,",
                              "            \"expression\": null,",
                              "            \"mandatory\": false",
                              "        },",
                              "        {",
                              "            \"label\": \"Integer Text Box\",",
                              "            \"fieldMetaDataType\": 3,",
                              "            \"fieldMetaDataRenderer\": 7,",
                              "            \"defaultValues\": null,",
                              "            \"multiValue\": false,",
                              "            \"expression\": null,",
                              "            \"mandatory\": true",
                              "        },",
                              "        {",
                              "            \"label\": \"String Dropdown multiValue\",",
                              "            \"fieldMetaDataType\": 4,",
                              "            \"fieldMetaDataRenderer\": 3,",
                              "            \"defaultValues\": [",
                              "                {",
                              "                    \"label\": \"Option 1\"",
                              "                },",
                              "                {",
                              "                    \"label\": \"Option 2\"",
                              "                },",
                              "                {",
                              "                    \"label\": \"Option 3\"",
                              "                }",
                              "            ],",
                              "            \"multiValue\": true,",
                              "            \"expression\": null,",
                              "            \"mandatory\": false",
                              "        },",
                              "        {",
                              "            \"label\": \"String Dropdown\",",
                              "            \"fieldMetaDataType\": 4,",
                              "            \"fieldMetaDataRenderer\": 3,",
                              "            \"defaultValues\": [",
                              "                {",
                              "                    \"label\": \"Option 4\"",
                              "                },",
                              "                {",
                              "                    \"label\": \"Option 5\"",
                              "                },",
                              "                {",
                              "                    \"label\": \"Option 6\"",
                              "                }",
                              "            ],",
                              "            \"multiValue\": false,",
                              "            \"expression\": null,",
                              "            \"mandatory\": true",
                              "        },",
                              "        {",
                              "            \"label\": \"String Default value\",",
                              "            \"fieldMetaDataType\": 4,",
                              "            \"fieldMetaDataRenderer\": 5,",
                              "            \"defaultValues\": [",
                              "                {",
                              "                    \"label\": \"Test String\"",
                              "                }",
                              "            ],",
                              "            \"multiValue\": false,",
                              "            \"expression\": null,",
                              "            \"mandatory\": false",
                              "        },",
                              "        {",
                              "            \"label\": \"String Text Area\",",
                              "            \"fieldMetaDataType\": 4,",
                              "            \"fieldMetaDataRenderer\": 6,",
                              "            \"defaultValues\": null,",
                              "            \"multiValue\": false,",
                              "            \"expression\": null,",
                              "            \"mandatory\": true",
                              "        },",
                              "        {",
                              "            \"label\": \"String Text Box\",",
                              "            \"fieldMetaDataType\": 4,",
                              "            \"fieldMetaDataRenderer\": 7,",
                              "            \"defaultValues\": null,",
                              "            \"multiValue\": false,",
                              "            \"expression\": null,",
                              "            \"mandatory\": false",
                              "        },",
                              "        {",
                              "            \"label\": \"Calculated Double Text Box\",",
                              "            \"fieldMetaDataType\": 4,",
                              "            \"fieldMetaDataRenderer\": 7,",
                              "            \"defaultValues\": null,",
                              "            \"multiValue\": false,",
                              "            \"expression\": \"{{Double Text Area}}+{{Double Text Box}}\",",
                              "            \"mandatory\": true",
                              "        },",
                              "        {",
                              "            \"label\": \"Calculated String Text Box\",",
                              "            \"fieldMetaDataType\": 6,",
                              "            \"fieldMetaDataRenderer\": 7,",
                              "            \"defaultValues\": null,",
                              "            \"multiValue\": false,",
                              "            \"expression\": \"{{String Text Area}}+{{String Text Box}}\",",
                              "            \"mandatory\": false",
                              "        },",
                              "    ]",
                              "}",
                              "let currentCustomField = customFields.shift();",
                              "currentCustomField['tenantID'] = pm.environment.get('ActionsTenantID')",
                              "",
                              "pm.globals.set('currentCustomField', JSON.stringify(currentCustomField));",
                              "pm.globals.set('customFields', customFields);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "9fb1e29b-e1d9-4fd7-95a3-558c7f13efde",
                            "exec": [
                              "let customFields = pm.globals.get('customFields')",
                              "",
                              "if(customFields && customFields.length > 0) {",
                              "    postman.setNextRequest('saveFields');",
                              "}",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Capture Field ID\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    ",
                              "    let customFieldIDs = []",
                              "    if(!pm.globals.get('customFieldIDs')) {",
                              "        customFieldIDs.add(jsonData.id);",
                              "        pm.globals.set('customFieldIDs', customFieldIDs)",
                              "    }",
                              "    else {",
                              "        customFieldIDs = pm.globals.get('customFieldIDs');",
                              "        customFieldIDs.add(jsonData.id);",
                              "        pm.globals.set('customFieldIDs', customFieldIDs)",
                              "    }",
                              "    pm.globals.set('removeCustomFieldIDs', pm.globals.get('customFieldIDs'))",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "1cc4bf7b-d084-44d3-999a-67dc08323b3a",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"agencyId\": \"{{ActionsAgencyID}}\",\n  \"tenantId\": \"{{ActionsTenantID}}\",\n  \"field\": {{currentCustomField}}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "http://{{r4e-api-internal}}/api/tenants/{{ActionsTenantID}}/{{customFields}}?agencyId={{ActionsAgencyID}}&userId={{agencyUserId}}",
                          "protocol": "http",
                          "host": [
                            "{{r4e-api-internal}}"
                          ],
                          "path": [
                            "api",
                            "tenants",
                            "{{ActionsTenantID}}",
                            "{{customFields}}"
                          ],
                          "query": [
                            {
                              "key": "agencyId",
                              "value": "{{ActionsAgencyID}}"
                            },
                            {
                              "key": "userId",
                              "value": "{{agencyUserId}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "saveFieldGroups",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "889f4693-b4e5-4a4c-aa81-35fbdfa88b17",
                            "exec": [
                              "let customFieldIDs = pm.globals.get('customFieldIDs');",
                              "let cfs = []",
                              "customFieldIDs.forEach((cf) => {",
                              "    cfs.push('\"'+cf+'\"');",
                              "})",
                              "",
                              "pm.globals.set('customFieldIDs', cfs);",
                              "pm.globals.set('cfIDs', cfs.slice(0,8));"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "c604c3e8-7f15-4710-9cc9-00c8d7029644",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test('Capture Field Group ID', function(){",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('fieldGroupId', jsonData.id);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "d05f0030-967c-42d1-b266-4f9a8140f53b",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"agencyId\": \"{{ActionsAgencyID}}\",\n    \"tenantId\": \"{{ActionsTenantID}}\",\n    \"group\": {\n        \"label\": \"Field Group 1\",\n        \"tenantId\": \"{{ActionsTenantID}}\",\n        \"fieldMetas\": [{{cfIDs}}]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "http://{{r4e-api-internal}}/api/tenants/{{ActionsTenantID}}/{{customFieldGroups}}?agencyId={{ActionsAgencyID}}&userId={{agencyUserId}}",
                          "protocol": "http",
                          "host": [
                            "{{r4e-api-internal}}"
                          ],
                          "path": [
                            "api",
                            "tenants",
                            "{{ActionsTenantID}}",
                            "{{customFieldGroups}}"
                          ],
                          "query": [
                            {
                              "key": "agencyId",
                              "value": "{{ActionsAgencyID}}"
                            },
                            {
                              "key": "userId",
                              "value": "{{agencyUserId}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "updateFieldGroups",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "3261d3a9-8beb-4cd6-8548-cc5ed430c413",
                            "exec": [
                              "pm.globals.set('cfIDs', pm.globals.get('customFieldIDs'));"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "14209c93-7d3b-4f5f-9da3-d9feec087088",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test('Capture Field Group ID', function(){",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('fieldGroupId', jsonData.id);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "9a01c967-1122-4316-9cda-f4bd82740d63",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"agencyId\": \"{{ActionsAgencyID}}\",\n    \"tenantId\": \"{{ActionsTenantID}}\",\n    \"group\": {\n        \"id\": \"{{fieldGroupId}}\",\n        \"label\": \"Field Group 1\",\n        \"tenantId\": \"{{ActionsTenantID}}\",\n        \"fieldMetas\": [{{cfIDs}}]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "http://{{r4e-api-internal}}/api/tenants/{{ActionsTenantID}}/{{customFieldGroups}}?agencyId={{ActionsAgencyID}}&userId={{agencyUserId}}",
                          "protocol": "http",
                          "host": [
                            "{{r4e-api-internal}}"
                          ],
                          "path": [
                            "api",
                            "tenants",
                            "{{ActionsTenantID}}",
                            "{{customFieldGroups}}"
                          ],
                          "query": [
                            {
                              "key": "agencyId",
                              "value": "{{ActionsAgencyID}}"
                            },
                            {
                              "key": "userId",
                              "value": "{{agencyUserId}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "saveTicketTypes",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "7e1055df-de16-4482-839e-409a70b4d104",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "0a90fbee-0906-449c-97e9-559b32ea8726",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test('Capture Ticket Type ID', function(){",
                              "    var jsonData = pm.response.json();",
                              "    pm.globals.set('ticketTypeId', jsonData.id);",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "514d97ee-74d8-4997-a9f8-7aaabdfc86cc",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"agencyId\": \"{{ActionsAgencyID}}\",\n    \"tenantId\": \"{{ActionsTenantID}}\",\n    \"type\": {\n        \"label\": \"Ticket Type 1\",\n        \"tenantId\": \"{{ActionsTenantID}}\",\n        \"fieldGroups\": [\"{{fieldGroupId}}\"]\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "http://{{r4e-api-internal}}/api/tenants/{{ActionsTenantID}}/{{customTicketTypes}}?agencyId={{ActionsAgencyID}}&userId={{agencyUserId}}",
                          "protocol": "http",
                          "host": [
                            "{{r4e-api-internal}}"
                          ],
                          "path": [
                            "api",
                            "tenants",
                            "{{ActionsTenantID}}",
                            "{{customTicketTypes}}"
                          ],
                          "query": [
                            {
                              "key": "agencyId",
                              "value": "{{ActionsAgencyID}}"
                            },
                            {
                              "key": "userId",
                              "value": "{{agencyUserId}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "removeTicketTypes",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "b8401a14-4133-40ab-a21d-296ae89529fc",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "acc7e419-51f3-4b9c-a099-e27b24e7ad2d",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "1d24400f-0b3a-407e-b9c2-99fc9dacf5a7",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "http://{{r4e-api-internal}}/api/tenants/{{ActionsTenantID}}/{{customTicketTypes}}/{{ticketTypeId}}?agencyId={{ActionsAgencyID}}&userId={{agencyUserId}}",
                          "protocol": "http",
                          "host": [
                            "{{r4e-api-internal}}"
                          ],
                          "path": [
                            "api",
                            "tenants",
                            "{{ActionsTenantID}}",
                            "{{customTicketTypes}}",
                            "{{ticketTypeId}}"
                          ],
                          "query": [
                            {
                              "key": "agencyId",
                              "value": "{{ActionsAgencyID}}"
                            },
                            {
                              "key": "userId",
                              "value": "{{agencyUserId}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "removeFieldGroups",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "dcd61a99-58ac-4603-9d35-b851d609cccd",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "b53a094a-a9c8-481c-a1ed-2ccf229fdd06",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "31b9afd8-87f4-452a-b8c5-9471db0e0433",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "http://{{r4e-api-internal}}/api/tenants/{{ActionsTenantID}}/{{customFieldGroups}}/{{fieldGroupId}}?agencyId={{ActionsAgencyID}}&userId={{agencyUserId}}",
                          "protocol": "http",
                          "host": [
                            "{{r4e-api-internal}}"
                          ],
                          "path": [
                            "api",
                            "tenants",
                            "{{ActionsTenantID}}",
                            "{{customFieldGroups}}",
                            "{{fieldGroupId}}"
                          ],
                          "query": [
                            {
                              "key": "agencyId",
                              "value": "{{ActionsAgencyID}}"
                            },
                            {
                              "key": "userId",
                              "value": "{{agencyUserId}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "removeFields",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "96581d35-ee89-408d-9007-072e5f3f2ae4",
                            "exec": [
                              "let customFieldIDs = pm.globals.get('removeCustomFieldIDs');",
                              "",
                              "pm.globals.set('currentCustomFieldId', customFieldIDs.shift());",
                              "",
                              "pm.globals.set('removeCustomFieldIDs', customFieldIDs);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "6e3bcc5d-a613-49a1-8b8f-85b004dca8f7",
                            "exec": [
                              "let customFieldIDs = pm.globals.get('removeCustomFieldIDs');",
                              "",
                              "if(customFieldIDs && customFieldIDs.length > 0) {",
                              "    postman.setNextRequest('removeFields');",
                              "}",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "6ca1f1bf-2a31-4442-8d20-0603c5cd05ab",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "http://{{r4e-api-internal}}/api/tenants/{{ActionsTenantID}}/{{customFields}}/{{currentCustomFieldId}}?agencyId={{ActionsAgencyID}}&userId={{agencyUserId}}",
                          "protocol": "http",
                          "host": [
                            "{{r4e-api-internal}}"
                          ],
                          "path": [
                            "api",
                            "tenants",
                            "{{ActionsTenantID}}",
                            "{{customFields}}",
                            "{{currentCustomFieldId}}"
                          ],
                          "query": [
                            {
                              "key": "agencyId",
                              "value": "{{ActionsAgencyID}}"
                            },
                            {
                              "key": "userId",
                              "value": "{{agencyUserId}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "id": "8e72aafd-fc45-48d0-a398-1177ed00c9bc"
                }
              ],
              "id": "ee8d5b9e-ad23-4a6f-ae36-1c0d7be069aa",
              "description": "RBENT-76394: API Automation: Ticket Types: Fields, Field Groups, Ticket Types"
            }
          ],
          "id": "4ba6a8be-dd76-4902-a56a-bc79ec4c6219"
        }
      ],
      "id": "4c8c4fe7-b983-4247-b2c2-7050664a7f91"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "753db9bf-2fdf-4db3-930f-1f75da7bef03",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "7fdf0f43-67fb-48d2-bf37-7de8620dbaa1",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "1f504af5-2c12-4a46-a039-57fcbcd79568",
      "key": "singleDataFile",
      "value": "true",
      "type": "string"
    },
    {
      "id": "bc69d12e-01a4-4a30-865d-1917401df3a0",
      "key": "r4e-admin",
      "value": "r4e-admin.{{env}}.svc.reputation.test:8080",
      "type": "string"
    },
    {
      "id": "51e82fbe-6d7f-4b76-b33e-118683c01a3a",
      "key": "r4e-location-backend",
      "value": "r4e-location-frontend.{{env}}.svc.reputation.test:8080",
      "type": "string"
    },
    {
      "id": "904f5585-faee-4b9c-98e7-2db492bc0572",
      "key": "r4e-actions",
      "value": "r4e-ticket-frontend.{{env}}.svc.reputation.test:8080",
      "type": "string"
    },
    {
      "id": "14799806-d169-4fcc-a320-15b851f65074",
      "key": "searchQueues",
      "value": "rest2thrift/R4ETicket/searchQueues",
      "type": "string"
    },
    {
      "id": "efe4363a-3176-431e-b03d-4aedc534d696",
      "key": "getQueue",
      "value": "rest2thrift/R4ETicket/getQueue",
      "type": "string"
    },
    {
      "id": "4d37bd85-4243-4e29-8230-78f69d263da8",
      "key": "searchStages",
      "value": "rest2thrift/R4ETicket/searchStages",
      "type": "string"
    },
    {
      "id": "09da6c57-c5a2-4586-92cf-219a0e7a661e",
      "key": "saveQueue",
      "value": "rest2thrift/R4ETicket/saveQueue",
      "type": "string"
    },
    {
      "id": "6e65e6dc-7982-464e-84b7-991786727054",
      "key": "removeQueue",
      "value": "rest2thrift/R4ETicket/removeQueue",
      "type": "string"
    },
    {
      "id": "9f7f76c1-ee4b-4e9b-8ca7-50465e5ccf72",
      "key": "saveStage",
      "value": "rest2thrift/R4ETicket/saveStage",
      "type": "string"
    },
    {
      "id": "3d32f959-8050-4c2f-876b-3f389407f586",
      "key": "saveTicket",
      "value": "rest2thrift/R4ETicket/saveTicket",
      "type": "string"
    },
    {
      "id": "aa1c0b23-d9cd-4260-8724-da10aae6ea86",
      "key": "getTicket",
      "value": "rest2thrift/R4ETicket/getTicket",
      "type": "string"
    },
    {
      "id": "81ce5438-7d55-44ec-9682-3254cce9623c",
      "key": "removeStage",
      "value": "rest2thrift/R4ETicket/removeStage",
      "type": "string"
    },
    {
      "id": "0c22f380-a574-431e-b6b8-503450ad80f4",
      "key": "removeTicket",
      "value": "rest2thrift/R4ETicket/hardRemoveTicketData",
      "type": "string"
    },
    {
      "id": "7ed72c74-846a-424e-85f0-d55da3138b4e",
      "key": "apiHost",
      "value": "api.{{env}}.reputation.com",
      "type": "string"
    },
    {
      "id": "a67b94e7-9916-4f4e-ae50-d35c2f0375de",
      "key": "v3_ticket_stages",
      "value": "v3/ticket-stages",
      "type": "string"
    },
    {
      "id": "70d4af13-9f09-47ec-b970-105062dbda7a",
      "key": "v3_ticket_queues",
      "value": "v3/ticket-queues",
      "type": "string"
    },
    {
      "id": "50e94fb1-cbef-4513-a627-750223875c61",
      "key": "v3_tickets",
      "value": "v3/tickets",
      "type": "string"
    },
    {
      "id": "e71203f7-5eaf-4ae7-929f-169c24951f73",
      "key": "v3_ticket_types",
      "value": "v3/ticket-types",
      "type": "string"
    },
    {
      "id": "5b595167-226b-49db-abe7-755fd2f036db",
      "key": "getLocationByCode",
      "value": "rest2thrift/R4ELocation/getLocationByCode",
      "type": "string"
    },
    {
      "id": "4f6aa826-4a27-4100-a516-4db507a50a2b",
      "key": "searchRoles",
      "value": "rest2thrift/R4EAdmin/searchRoles",
      "type": "string"
    },
    {
      "id": "f5947b3c-8b52-42d6-9ed8-584d9d89bd7c",
      "key": "env",
      "value": "e2e",
      "type": "string"
    },
    {
      "id": "3541e37f-283e-4144-9ab4-8f2b4be9f39e",
      "key": "getTenantApiKey",
      "value": "rest2thrift/R4EAdmin/getTenantApiKey",
      "type": "string"
    },
    {
      "id": "2121043c-7ba3-4d8b-9990-95ef76f6f721",
      "key": "addressTemplate",
      "value": "api/address/template",
      "type": "string"
    },
    {
      "id": "31d58e93-59f0-4659-8ccd-804d74cffc63",
      "key": "appHost",
      "value": "app.{{env}}.reputation.com",
      "type": "string"
    },
    {
      "id": "21ea6656-c271-49f8-a755-22a20e3d2adf",
      "key": "r4e-address",
      "value": "r4e-address.{{env}}.svc.reputation.test:8080",
      "type": "string"
    },
    {
      "id": "a4df4629-5227-4c5d-ae88-0c6002810cfe",
      "key": "getAddressTemplate",
      "value": "rest2thrift/R4EAddress/getAddressTemplate",
      "type": "string"
    },
    {
      "id": "4399b02c-3ae2-45c2-bc63-ebfea31fab06",
      "key": "searchTickets",
      "value": "rest2thrift/R4ETicket/searchTickets"
    },
    {
      "id": "ce7bb392-d50d-4cea-866c-0ef8dc76a5f2",
      "key": "r4e-user",
      "value": "r4e-user.{{env}}.svc.reputation.test:8080",
      "type": "string"
    },
    {
      "id": "cc742164-02ab-41f6-924d-c3dda6f7fc7c",
      "key": "getSystemUser",
      "value": "rest2thrift/R4EUser/getSystemUser",
      "type": "string"
    },
    {
      "id": "9cbb349c-24af-469c-b4fa-cd65d0efc811",
      "key": "removeLambdaByID",
      "value": "rest2thrift/R4ELambda/removeLambdaByID",
      "type": "string"
    },
    {
      "id": "77de3c49-5839-4069-8429-7f76f0e4e2b3",
      "key": "removeEscalation",
      "value": "rest2thrift/R4ETicket/removeEscalation",
      "type": "string"
    },
    {
      "id": "2ba9f3de-dd27-4470-94e6-e208b5c8c388",
      "key": "r4e-survey3-frontend",
      "value": "r4e-survey3-frontend.{{env}}.svc.reputation.test:8080",
      "type": "string"
    },
    {
      "id": "6da0841d-ff12-4b81-b418-1c19addc2eb9",
      "key": "saveSurveyTemplate",
      "value": "rest2thrift/R4ESurvey3/saveSurveyTemplate",
      "type": "string"
    },
    {
      "id": "d32cdba7-8327-4bd2-99a7-cdb6c6c2f7a1",
      "key": "r4e-survey3",
      "value": "r4e-survey3-frontend.{{env}}.svc.reputation.test:8080",
      "type": "string"
    },
    {
      "id": "a86eea71-caee-4c61-86c2-907a55732438",
      "key": "saveLambda",
      "value": "rest2thrift/R4ELambda/saveLambda",
      "type": "string"
    },
    {
      "id": "3bd4bcd1-a4b4-4826-93b9-89b195fddfbf",
      "key": "saveEscalation",
      "value": "rest2thrift/R4ETicket/saveEscalation",
      "type": "string"
    },
    {
      "id": "fb9b3e4b-e535-44c8-bbd7-613cad43b7aa",
      "key": "r4e-lambda",
      "value": "r4e-lambda.{{env}}.svc.reputation.test:8080",
      "type": "string"
    },
    {
      "id": "58e879ae-486c-44cc-98a1-cac61e953b59",
      "key": "customFields",
      "value": "ticket-custom-definitions/fields",
      "type": "string"
    },
    {
      "id": "7a1cbb74-2ef4-47b7-b484-36359cafb06c",
      "key": "getUsersByEmail",
      "value": "rest2thrift/R4EUser/getUsersByEmail",
      "type": "string"
    },
    {
      "id": "c6b379cd-0f25-4893-9926-9c9895974ffd",
      "key": "saveUser",
      "value": "rest2thrift/R4EUser/saveUser",
      "type": "string"
    },
    {
      "id": "19381af8-6ae1-457d-b262-7eb978f6bfc1",
      "key": "changePassword",
      "value": "rest2thrift/R4EUser/changePassword",
      "type": "string"
    },
    {
      "id": "892f1fe8-4052-4af9-9923-15ad1af17e09",
      "key": "r4e-api-internal",
      "value": "r4e-api-internal.{{env}}.svc.reputation.test:8080",
      "type": "string"
    },
    {
      "id": "a1792d2b-6b3d-47ec-871e-6649d5ce4836",
      "key": "deleteUsers",
      "value": "rest2thrift/R4EUser/deleteUsers",
      "type": "string"
    },
    {
      "id": "63da817b-83c0-4467-ad53-c42643171492",
      "key": "customFieldGroups",
      "value": "ticket-custom-definitions/groups",
      "type": "string"
    },
    {
      "id": "47237b39-15d6-44c6-ab4e-d989975f2bb9",
      "key": "customTicketTypes",
      "value": "ticket-custom-definitions/types",
      "type": "string"
    },
    {
      "id": "57741d8c-68d1-45ac-afae-d49b3df93067",
      "key": "notes",
      "value": "ticket-notes",
      "type": "string"
    },
    {
      "id": "2311f317-fda1-4f05-842b-ee1bd2e894c4",
      "key": "removeLambdas",
      "value": "rest2thrift/R4ELambda/removeLambdas",
      "type": "string"
    },
    {
      "id": "6a996d47-59eb-4caa-bfb5-ede61ba8f245",
      "key": "saveTag",
      "value": "rest2thrift/R4ETicket/saveTag",
      "type": "string"
    },
    {
      "id": "0a631f0a-4125-4c67-9fff-3e4c470c0059",
      "key": "removeTag",
      "value": "rest2thrift/R4ETicket/removeTag",
      "type": "string"
    },
    {
      "id": "857851b3-12f3-4838-8bb6-51edfb39097f",
      "key": "removeLocationPages",
      "value": "rest2thrift/R4ELocation/removeLocationPages",
      "type": "string"
    },
    {
      "id": "0fa3393f-495f-4860-b5e4-c25deb65c5e3",
      "key": "removeReview",
      "value": "rest2thrift/R4EReview/removeReview",
      "type": "string"
    },
    {
      "id": "656bbc3c-3f22-4cf0-aaa6-09271a3cbccc",
      "key": "removeSurveyResult",
      "value": "rest2thrift/R4ESurvey3/removeSurveyResult",
      "type": "string"
    },
    {
      "id": "0aa82ef5-31d1-4fd3-a181-971694d8e055",
      "key": "getLocationPagesByCode",
      "value": "rest2thrift/R4ELocation/getLocationPagesByCode",
      "type": "string"
    },
    {
      "id": "a4917ba8-ac8b-4cc0-a13d-6fc531eaa708",
      "key": "saveLocationPages",
      "value": "rest2thrift/R4ELocation/saveLocationPages",
      "type": "string"
    },
    {
      "id": "15e65862-a805-43ce-b5d9-6f82aadf01cb",
      "key": "r4e-review",
      "value": "r4e-review.{{env}}.svc.reputation.test:8080",
      "type": "string"
    },
    {
      "id": "55cc7f0c-905f-404f-80f3-789454c88790",
      "key": "saveReview",
      "value": "rest2thrift/R4EReview/saveReview",
      "type": "string"
    },
    {
      "id": "5372fa6a-faaa-4015-90cc-1986fc17cc36",
      "key": "r4e-credential",
      "value": "r4e-credential-backend.{{env}}.svc.reputation.test:8080",
      "type": "string"
    },
    {
      "id": "3f9bb572-eb29-4802-a7a4-6cc7331c3fa1",
      "key": "saveCredential",
      "value": "rest2thrift/R4ECredential/saveCredential",
      "type": "string"
    },
    {
      "id": "7309c728-9f3f-458d-84fe-a25e37a48651",
      "key": "removeCredential",
      "value": "rest2thrift/R4ECredential/removeCredential",
      "type": "string"
    },
    {
      "id": "bdf9d424-a501-4a28-ac3a-5bf58237ac95",
      "key": "saveSurveyResult",
      "value": "rest2thrift/R4ESurvey3/saveSurveyResult",
      "type": "string"
    },
    {
      "id": "480e95aa-8fbc-4afc-91fb-f3d4cfb9d0c5",
      "key": "removeSurveyTemplate",
      "value": "rest2thrift/R4ESurvey3/removeSurveyTemplate",
      "type": "string"
    }
  ]
}